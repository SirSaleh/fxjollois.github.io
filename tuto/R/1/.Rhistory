#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON(produits[[84]])
to_JSON <- function (objet) {
chaine = ""
cat("\n**********************\n")
print(objet)
cat("Class =", class(objet), "\n")
if (class(objet) == "list") {
cat("-> list\n")
chaine = "{"
for (i in 1:length(objet)) {
if (!is.na(objet[[i]])) {
print(names(objet)[i])
if (i > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[i], "\": ", to_JSON(objet[[i]]), sep = "")
}
}
chaine = paste(chaine, "}\n", sep = "")
} else {
if (class(objet) == "data.frame") {
cat("-> data.frame\n")
if (nrow(objet) == 1 ){
chaine = "{"
for (j in 1:ncol(objet)) {
if (!is.na(objet[1,j])) {
if (j > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[j], "\": ", to_JSON(objet[1,j]), sep = "")
}
}
chaine = paste(chaine, "}")
} else {
chaine = "["
for (i in 1:nrow(objet)) {
if (i > 1) chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, to_JSON(objet[i,]), sep = "")
}
chaine = paste(chaine, "]")
}
} else {
cat("-> atomic\n")
if (class(objet) == "character") {
chaine = paste("\"", objet, "\"", sep = "")
} else {
chaine = objet
}
}
}
cat("\n_________________________n\n")
return (chaine)
}
#to_JSON(commandes[[830]]$Client)
#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON(produits[[84]])
to_JSON <- function (objet) {
chaine = ""
cat("\n**********************\n")
print(objet)
cat("Class =", class(objet), "\n")
if (class(objet) == "list") {
cat("-> list\n")
chaine = "{"
for (i in 1:length(objet)) {
cat("\t\t\tObjet test ------------> :")
print(objet[[i]])
if (!is.na(objet[[i]])) {
print(names(objet)[i])
if (i > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[i], "\": ", to_JSON(objet[[i]]), sep = "")
}
}
chaine = paste(chaine, "}\n", sep = "")
} else {
if (class(objet) == "data.frame") {
cat("-> data.frame\n")
if (nrow(objet) == 1 ){
chaine = "{"
for (j in 1:ncol(objet)) {
if (!is.na(objet[1,j])) {
if (j > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[j], "\": ", to_JSON(objet[1,j]), sep = "")
}
}
chaine = paste(chaine, "}")
} else {
chaine = "["
for (i in 1:nrow(objet)) {
if (i > 1) chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, to_JSON(objet[i,]), sep = "")
}
chaine = paste(chaine, "]")
}
} else {
cat("-> atomic\n")
if (class(objet) == "character") {
chaine = paste("\"", objet, "\"", sep = "")
} else {
chaine = objet
}
}
}
cat("\n_________________________\n\n")
return (chaine)
}
#to_JSON(commandes[[830]]$Client)
#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON(produits[[84]])
to_JSON <- function (objet) {
chaine = ""
#cat("\n**********************\n")
#print(objet)
#cat("Class =", class(objet), "\n")
if (class(objet) == "list") {
#cat("-> list\n")
chaine = "{"
for (i in 1:length(objet)) {
cat("\t\t\tObjet test ------------> :")
print(objet[[i]])
if (!is.na(objet[[i]])) {
#print(names(objet)[i])
if (i > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[i], "\": ", to_JSON(objet[[i]]), sep = "")
}
}
chaine = paste(chaine, "}\n", sep = "")
} else {
if (class(objet) == "data.frame") {
#cat("-> data.frame\n")
if (nrow(objet) == 1 ){
chaine = "{"
for (j in 1:ncol(objet)) {
if (!is.na(objet[1,j])) {
if (j > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[j], "\": ", to_JSON(objet[1,j]), sep = "")
}
}
chaine = paste(chaine, "}")
} else {
chaine = "["
for (i in 1:nrow(objet)) {
if (i > 1) chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, to_JSON(objet[i,]), sep = "")
}
chaine = paste(chaine, "]")
}
} else {
#cat("-> atomic\n")
if (class(objet) == "character") {
chaine = paste("\"", objet, "\"", sep = "")
} else {
chaine = objet
}
}
}
#cat("\n_________________________\n\n")
return (chaine)
}
#to_JSON(commandes[[830]]$Client)
#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON(produits[[84]])
to_JSON <- function (objet) {
chaine = ""
#cat("\n**********************\n")
#print(objet)
#cat("Class =", class(objet), "\n")
if (class(objet) == "list") {
#cat("-> list\n")
chaine = "{"
for (i in 1:length(objet)) {
cat("\t\t\tObjet test ------------> :")
print(objet[[i]])
print(is.na(objet[[i]]))
if (!is.na(objet[[i]])) {
#print(names(objet)[i])
if (i > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[i], "\": ", to_JSON(objet[[i]]), sep = "")
}
}
chaine = paste(chaine, "}\n", sep = "")
} else {
if (class(objet) == "data.frame") {
#cat("-> data.frame\n")
if (nrow(objet) == 1 ){
chaine = "{"
for (j in 1:ncol(objet)) {
if (!is.na(objet[1,j])) {
if (j > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[j], "\": ", to_JSON(objet[1,j]), sep = "")
}
}
chaine = paste(chaine, "}")
} else {
chaine = "["
for (i in 1:nrow(objet)) {
if (i > 1) chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, to_JSON(objet[i,]), sep = "")
}
chaine = paste(chaine, "]")
}
} else {
#cat("-> atomic\n")
if (class(objet) == "character") {
chaine = paste("\"", objet, "\"", sep = "")
} else {
chaine = objet
}
}
}
#cat("\n_________________________\n\n")
return (chaine)
}
#to_JSON(commandes[[830]]$Client)
#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON(produits[[84]])
to_JSON <- function (objet) {
chaine = ""
#cat("\n**********************\n")
#print(objet)
#cat("Class =", class(objet), "\n")
if (class(objet) == "list") {
#cat("-> list\n")
chaine = "{"
for (i in 1:length(objet)) {
cat("\nObjet test ------------> :\n")
print(objet[[i]])
print(is.na(objet[[i]]))
if (!is.na(objet[[i]])) {
#print(names(objet)[i])
if (i > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[i], "\": ", to_JSON(objet[[i]]), sep = "")
}
}
chaine = paste(chaine, "}\n", sep = "")
} else {
if (class(objet) == "data.frame") {
#cat("-> data.frame\n")
if (nrow(objet) == 1 ){
chaine = "{"
for (j in 1:ncol(objet)) {
if (!is.na(objet[1,j])) {
if (j > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[j], "\": ", to_JSON(objet[1,j]), sep = "")
}
}
chaine = paste(chaine, "}")
} else {
chaine = "["
for (i in 1:nrow(objet)) {
if (i > 1) chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, to_JSON(objet[i,]), sep = "")
}
chaine = paste(chaine, "]")
}
} else {
#cat("-> atomic\n")
if (class(objet) == "character") {
chaine = paste("\"", objet, "\"", sep = "")
} else {
chaine = objet
}
}
}
#cat("\n_________________________\n\n")
return (chaine)
}
#to_JSON(commandes[[830]]$Client)
#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON(produits[[84]])
to_JSON <- function (objet) {
chaine = ""
#cat("\n**********************\n")
#print(objet)
#cat("Class =", class(objet), "\n")
if (class(objet) == "list") {
#cat("-> list\n")
chaine = "{"
for (i in 1:length(objet)) {
cat("\nObjet test ------------> :\n")
print(class(objet))
print(objet[[i]])
print(is.na(objet[[i]]))
if (!is.na(objet[[i]])) {
#print(names(objet)[i])
if (i > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[i], "\": ", to_JSON(objet[[i]]), sep = "")
}
}
chaine = paste(chaine, "}\n", sep = "")
} else {
if (class(objet) == "data.frame") {
#cat("-> data.frame\n")
if (nrow(objet) == 1 ){
chaine = "{"
for (j in 1:ncol(objet)) {
if (!is.na(objet[1,j])) {
if (j > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[j], "\": ", to_JSON(objet[1,j]), sep = "")
}
}
chaine = paste(chaine, "}")
} else {
chaine = "["
for (i in 1:nrow(objet)) {
if (i > 1) chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, to_JSON(objet[i,]), sep = "")
}
chaine = paste(chaine, "]")
}
} else {
#cat("-> atomic\n")
if (class(objet) == "character") {
chaine = paste("\"", objet, "\"", sep = "")
} else {
chaine = objet
}
}
}
#cat("\n_________________________\n\n")
return (chaine)
}
#to_JSON(commandes[[830]]$Client)
#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON(produits[[84]])
produits[[84]]
produits[[84]]$Fournisseyr
produits[[84]]$Fournisseur
class(produits[[84]]$Fournisseur)
to_JSON(produits[[84]])
class(produits[[84]]$Fournisseur[[i]])
to_JSON(produits[[84]])
is.vector(produits)
is.vector(produits[[84]])
is.vector(produits[[84]]$Fournisseur)
length(produits[[84]]$Fournisseur)
to_JSON <- function (objet) {
chaine = ""
#cat("\n**********************\n")
#print(objet)
#cat("Class =", class(objet), "\n")
if (class(objet) == "list") {
#cat("-> list\n")
chaine = "{"
for (i in 1:length(objet)) {
cat("\nObjet test ------------> :\n")
print(class(objet))
print(objet[[i]])
print(is.na(objet[[i]]))
if ((length(objet[[i]] > 1) || (!is.na(objet[[i]]))) {
#print(names(objet)[i])
if (i > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[i], "\": ", to_JSON(objet[[i]]), sep = "")
}
}
chaine = paste(chaine, "}\n", sep = "")
} else {
if (class(objet) == "data.frame") {
#cat("-> data.frame\n")
if (nrow(objet) == 1 ){
chaine = "{"
for (j in 1:ncol(objet)) {
if (!is.na(objet[1,j])) {
if (j > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[j], "\": ", to_JSON(objet[1,j]), sep = "")
}
}
chaine = paste(chaine, "}")
} else {
chaine = "["
for (i in 1:nrow(objet)) {
if (i > 1) chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, to_JSON(objet[i,]), sep = "")
}
chaine = paste(chaine, "]")
}
} else {
#cat("-> atomic\n")
if (class(objet) == "character") {
chaine = paste("\"", objet, "\"", sep = "")
} else {
chaine = objet
}
}
}
#cat("\n_________________________\n\n")
return (chaine)
}
#to_JSON(commandes[[830]]$Client)
#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON <- function (objet) {
chaine = ""
#cat("\n**********************\n")
#print(objet)
#cat("Class =", class(objet), "\n")
if (class(objet) == "list") {
#cat("-> list\n")
chaine = "{"
for (i in 1:length(objet)) {
cat("\nObjet test ------------> :\n")
print(class(objet))
print(objet[[i]])
print(is.na(objet[[i]]))
if ((length(objet[[i]]) > 1) || (!is.na(objet[[i]]))) {
#print(names(objet)[i])
if (i > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[i], "\": ", to_JSON(objet[[i]]), sep = "")
}
}
chaine = paste(chaine, "}\n", sep = "")
} else {
if (class(objet) == "data.frame") {
#cat("-> data.frame\n")
if (nrow(objet) == 1 ){
chaine = "{"
for (j in 1:ncol(objet)) {
if (!is.na(objet[1,j])) {
if (j > 1)
chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, "\"", names(objet)[j], "\": ", to_JSON(objet[1,j]), sep = "")
}
}
chaine = paste(chaine, "}")
} else {
chaine = "["
for (i in 1:nrow(objet)) {
if (i > 1) chaine = paste(chaine, ", ", sep = "")
chaine = paste(chaine, to_JSON(objet[i,]), sep = "")
}
chaine = paste(chaine, "]")
}
} else {
#cat("-> atomic\n")
if (class(objet) == "character") {
chaine = paste("\"", objet, "\"", sep = "")
} else {
chaine = objet
}
}
}
#cat("\n_________________________\n\n")
return (chaine)
}
#to_JSON(commandes[[830]]$Client)
#to_JSON(commandes[[830]]$Produits)
#to_JSON(commandes[[830]]$NoCom)
to_JSON(produits[[84]])
?mongo.insert
mongo.insert(mongo, "cpt2000.essai", 2)
mongo.insert(mongo, "cpt2000.essai", list(2)
)
mongo.insert(mongo, "cpt2000.essai", list(a = 2))
cmd
cmds = readLines(fic)
cmds
head(commandes
)
mongo.insert(mongo, "cpt2000.essai", commandes[[1]])
cmds[1]
fromJSON(cmds[1])
mongo.bson.buffer(cmds[1])
mongo.bson.from.buffer(cmds[1])
mongo.bson.buffer
mongo.bson.buffer.create()
buf = mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, cmds[1])
mongo.drop(mongo, "cpt2000.Commandes")
mongo.drop(mongo, "cpt2000.Produits")
for (cmd in commandes)
mongo.insert(mongo, "cpt2000.Commandes",
list(mongo.bson.from.JSON(cmd)))
mongo.count(mongo, "cpt2000.Commandes")
for (prd in produits)
mongo.insert(mongo, "cpt2000.Produits",
list(mongo.bson.from.JSON(prd)))
mongo.count(mongo, "cpt2000.Produits")
mongo.drop(mongo, "cpt2000.Commandes")
mongo.drop(mongo, "cpt2000.Produits")
for (cmd in commandes)
mongo.insert(mongo, "cpt2000.Commandes", cmd)
mongo.count(mongo, "cpt2000.Commandes")
for (prd in produits)
mongo.insert(mongo, "cpt2000.Produits", prod)
mongo.count(mongo, "cpt2000.Produits")
prd
cmd
for (prd in produits)
mongo.insert(mongo, "cpt2000.Produits", prd)
mongo.count(mongo, "cpt2000.Produits")
system("mongoimport --db cpt2000 --collection ProduitsBis --file Comptoir2000-produits.mongodb
")
?system
