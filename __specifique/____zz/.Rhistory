rm(list = ls()[grep("rep", ls())])
rm(temp)
data = CIS[1]
data
data = CIS[1,]
data
data = as.list(CIS[1,])
data
attr(data, "label")
attr(data, "label") = NULL
data
attr(data, "labels") = NULL
data
data = list(CIS[1,])
data
data = as.list(CIS[1,])
attr(data, "labels") = NULL
attr(data, "info") = NULL
data
data$Composition =
subset(CIS_COMPO, CodeCIS == data$CodeCIS)
subset(CIS_COMPO, CodeCIS == data$CodeCIS)
names(CIS_COMPO)
bd
bd = mongo(url = "mongodb://193.51.82.104:2231",
db = "medicaments",
collection = "import20161109")
library(mongolite)
bd = mongo(url = "mongodb://193.51.82.104:2231",
db = "medicaments",
collection = "import20161109")
bd
bd$insert(data)
data = CIS[1,]
data
compo = subset(CIS_COMPO, CodeCIS == data$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) data$Composition = compo
data
bd$insert(data)
bd$insert(CIS)
library(jsonlite)
toJSON(data)
data = as.list(CIS[1,])
attr(data, "labels") = NULL
attr(data, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == data$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) data$Composition = compo
data
toJSON(data)
fromJSON(toJSON(data))
bd$drop()
bd$insert(fromJSON(toJSON(data)))
bd$insert(toJSON(data))
list(head(CIS))
as.list(head(CIS))
bd$drop()
data = list()
for (i in 1:5) {
temp = as.list(CIS[1,])
attr(data, "labels") = NULL
attr(data, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == data$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) data$Composition = compo
data[[i]] = temp
}
data
data = list()
for (i in 1:5) {
temp = as.list(CIS[1,])
attr(temp, "labels") = NULL
attr(temp, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) temp$Composition = compo
data[[i]] = temp
}
data
bd$insert(data)
bd$insert(toJSON(data))
toJSON(data)
toJSON(temp)
bd$count()
bd$insert(head(CIS))
bd$find()
length(unique(CIS$CodeCIS))
nrow(CIS)
sprintf('{ "CodeCIS": %s }', CIS$CodeCIS[1])
bd$update(query = sprintf('{ "CodeCIS": %s }', CIS$CodeCIS[1]),
update = sprintf('{ "Composition": %s }', subset(CIS_COMPO, CodeCIS == CIS$CodeCIS[1])))
bd$update(query = sprintf('{ "CodeCIS": %s }', CIS$CodeCIS[1]),
update = sprintf('{ "Composition": %s }', toJSON(subset(CIS_COMPO, CodeCIS == CIS$CodeCIS[1])))
)
bd$update(query = sprintf('{ "CodeCIS": %s }', CIS$CodeCIS[1]),
upsert = sprintf('{ "Composition": %s }', toJSON(subset(CIS_COMPO, CodeCIS == CIS$CodeCIS[1])))
bd$update(query = sprintf('{ "CodeCIS": %s }', CIS$CodeCIS[1]),
bd$insert(head(CIS))
bd$update(query = sprintf('{ "CodeCIS": %s }', CIS$CodeCIS[1]),
upsert = sprintf('{ "Composition": %s }', toJSON(subset(CIS_COMPO, CodeCIS == CIS$CodeCIS[1]))))
bd$update(query = sprintf('{ "CodeCIS": %s }', CIS$CodeCIS[1]),
update = sprintf('{ "Composition": %s }', toJSON(subset(CIS_COMPO, CodeCIS == CIS$CodeCIS[1]))),
upsert = TRUE)
temp
toJSON(temp)
bd$update(query = sprintf('{ "CodeCIS": %s }', CIS$CodeCIS[1]),
update = toJSON(temp), #sprintf('{ "Composition": %s }', toJSON(subset(CIS_COMPO, CodeCIS == CIS$CodeCIS[1]))),
upsert = TRUE)
data = list()
for (i in 1:5) {
temp = as.list(CIS[1,])
attr(temp, "labels") = NULL
attr(temp, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) temp$Composition = compo
data[[i]] = temp
}
df <- fromJSON(toJSON(data, auto_unbox = T))
bd$insert(df)
aggregate()
names(CIS_COMPO)
aggregate(Code ~ CodeCIS, CIS_COMPO, length)
bd$drop()
head(CIS$CodeCIS)
data = list()
for (i in 1:5) {
temp = as.list(CIS[1,])
attr(temp, "labels") = NULL
attr(temp, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) temp$Composition = compo
cip = subset(CIS_CIP, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0)
data[[i]] = temp
}
df <- fromJSON(toJSON(data, auto_unbox = T))
bd$insert(df)
bd$drop()
data = list()
for (i in 1:nrow(CIS)) {
temp = as.list(CIS[1,])
attr(temp, "labels") = NULL
attr(temp, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) temp$Composition = compo
cip = subset(CIS_CIP, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0)
data[[i]] = temp
}
df <- fromJSON(toJSON(data, auto_unbox = T))
bd$insert(df)
aggregate(Code ~ CodeCIS, CIS_COMPO, length)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), CodeCIS > 1)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), Code > 1)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), Code > 3)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), Code > 10)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), Code > 30)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), Code > 50)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), Code > 40)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), Code > 3)
subset(aggregate(Code ~ CodeCIS, CIS_COMPO, length), Code > 30)
merge(aggregate(Code ~ CodeCIS, CIS_COMPO, length), CIS)
subset(merge(aggregate(Code ~ CodeCIS, CIS_COMPO, length), CIS), Code > 35)
bd$distinct(key = "CodeCIS")
bd$drop()
data = list()
for (i in 1:nrow(CIS)) {
temp = as.list(CIS[i,])
attr(temp, "labels") = NULL
attr(temp, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) temp$Composition = compo
cip = subset(CIS_CIP, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0)
data[[i]] = temp
}
df <- fromJSON(toJSON(data, auto_unbox = T))
bd$insert(df)
subset(merge(aggregate(Code ~ CodeCIS, CIS_COMPO, length), CIS), Code == 3)
subset(merge(aggregate(Code ~ CodeCIS, CIS_COMPO, length), CIS), Code == 3)$CodeCIS
sample(1:nrow(CIS))[1]
CIS[sample(1:nrow(CIS))[1],]
CIS[sample(1:nrow(CIS))[1],]
CIS[sample(1:nrow(CIS))[1],]
aggregate(CodeCIS ~ Titulaires, CIS, length)
head(CIS_GENER)
unique(CIS_GENER$Libelle)
bd$drop()
data = list()
for (i in 1:nrow(CIS)) {
temp = as.list(CIS[i,])
attr(temp, "labels") = NULL
attr(temp, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) temp$Composition = compo
cip = subset(CIS_CIP, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(cip) > 0) temp$CIP = cip
cpd = subset(CIS_CPD, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(cpd) > 0) temp$CPD = cpd
gener = subset(CIS_GENER, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(gener) > 0) temp$GENER = gener
smr = subset(CIS_SMR, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(smr) > 0) temp$SMR = smr
asmr = subset(CIS_ASMR, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(asmr) > 0) temp$ASMR = asmr
data[[i]] = temp
}
bd$drop()
bd$count()
bd$drop()
#bd$drop()
data = list()
for (i in 1:nrow(CIS)) {
temp = as.list(CIS[i,])
attr(temp, "labels") = NULL
attr(temp, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) temp$Composition = compo
cip = subset(CIS_CIP, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(cip) > 0) temp$CIP = cip
cpd = subset(CIS_CPD, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(cpd) > 0) temp$CPD = cpd
gener = subset(CIS_GENER, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(gener) > 0) temp$GENER = gener
smr = subset(HAS_SMR, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(smr) > 0) temp$SMR = smr
asmr = subset(HAS_ASMR, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(asmr) > 0) temp$ASMR = asmr
data[[i]] = temp
}
#bd$drop()
data = list()
for (i in 1:nrow(CIS)) {
temp = as.list(CIS[i,])
attr(temp, "labels") = NULL
attr(temp, "info") = NULL
compo = subset(CIS_COMPO, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(compo) > 0) temp$Composition = compo
cip = subset(CIS_CIP, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(cip) > 0) temp$CIP = cip
cpd = subset(CIS_CPD, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(cpd) > 0) temp$CPD = cpd
gener = subset(CIS_GENER, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(gener) > 0) temp$GENER = gener
smr = subset(CIS_HAS_SMR, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(smr) > 0) temp$SMR = smr
asmr = subset(CIS_HAS_ASMR, CodeCIS == temp$CodeCIS, select = -CodeCIS)
if (length(asmr) > 0) temp$ASMR = asmr
data[[i]] = temp
}
df <- fromJSON(toJSON(data, auto_unbox = T))
bd$insert(df)
bd$drop()
nrow(df)
bd$count()
bd$drop()
bd$insert(df[1:5000,])
bd$insert(df[5001:10000,])
bd$insert(df[10001:nrow(df),])
bd$count()
cis = bd$distinct(key = "CodeCIS")
subset(CIS_GENER, Libelle == "IBUPROFENE 400 mg - BRUFEN 400 mg, comprimé pelliculé")
View(CIS_GENER)
grep("IBUPROFENE", CIS_GENER$Libelle)
CIS_GENERE[grep("IBUPROFENE", CIS_GENER$Libelle),]
CIS_GENER[grep("IBUPROFENE", CIS_GENER$Libelle),]
CIS_GENER[grep("IBUPROFENE", CIS_GENER$Libelle),1:2]
CIS_CPD
names(CIS_CPD)
View(CIS)
View(CIS_CIP)
View(CIS_CPD)
unique(CIS_CPD)
affichePays <- function (pays, continent) {
cat(pays, " (", continent, ")\n")
}
affichePays("France", "Europe")
affichePays <- function (pays, continent) {
cat(pays, " (", continent, ")\n", sep = "")
}
affichePays("France", "Europe")
affichePays <- function (pays, continent, indep = NA) {
cat(pays, "(", continent)
if (!is.na(indep)) {
cat("- indépendant en", indep)
}
cat(")\n", sep = "")
}
affichePays("France", "Europe")
affichePays("France", "Europe")
affichePays <- function (pays, continent, indep = NA) {
cat(pays, " (", continent, sep = "")
if (!is.na(indep)) {
cat("- indépendant en", indep)
}
cat(")\n", sep = "")
}
affichePays("France", "Europe")
affichePays("France", "Europe", 843)
affichePays <- function (pays, continent, indep = NA) {
cat(pays, " (", continent, sep = "")
if (!is.na(indep)) {
cat(" - indépendant en", indep)
}
cat(")\n", sep = "")
}
affichePays("France", "Europe")
affichePays("France", "Europe", 843)
affichePays <- function (pays, continent, indep = NA) {
cat(pays, " (", continent, sep = "")
if (!is.na(indep)) {
cat(" - indépendant en", indep)
}
cat(")\n", sep = "")
}
affichePays("France", "Europe")
affichePays("France", "Europe", 843)
affichePays("France", "Europe", NA)
ratio <- function (pop.pays, pop.villes) {
# on ajoute des contrôles pour s'assurer que l'on passe bien des nombres
if (!is.numeric(pop.pays) | !is.numeric(pop.villes)) {
return (NULL)
}
return(sum(pop.villes, na.rm = TRUE) / pop.pays)
}
ratio(10, c(1, 2, 3))
ratio("10", c(1, 2, 3))
ratio(10, c(1, 2, NA))
ratio(10, c(1, 2, "a"))
load("donnees/World/world-liste.Rdata")
length(Country.liste)
p = sapply(Country.liste, function(e) {
return(e$Population)
})
sum(as.numeric(p))
Reduce(function(a, b) { return (a+b)}, p, numeric(1))
Reduce(
function (a, b) {
a$Population = a$Population + b$Population
return(a)
},
Country.liste,
list(Population = numeric(1))
)
res = Reduce(
function (a, b) {
a$Population = numeric(a$Population) + b$Population
return(a)
},
Country.liste)
res = Reduce(
function (a, b) {
a$Population = numeric(a$Population) + b$Population
return(a)
},
Country.liste
)
res = Reduce(
function (a, b) {
a$Population = a$Population + b$Population
return(a)
},
Country.liste,
list(Population = numeric(1))
)
res
?Reduce
res = Reduce(
function (a, b) {
a$Population = numeric(a$Population) + b$Population
return(a)
},
Country.liste
)
res = Reduce(
function (a, b) {
a$Population = as.numeric(a$Population) + b$Population
return(a)
},
Country.liste
)
res$Population
invisible(
lapply(
Country.liste,
function(p) {
affichePays(p$Name, p$Continent, p$IndepYear)
}
)
)
Country.new = lapply(
Country.liste,
function(e) {
e$Ratio = ratio(e$Population, e$City$Population)
return(e)
}
)
res = Filter(
function(e) {
if (is.null(e$Ratio)) {
return (FALSE)
}
return (e$Ratio > 1)
},
Country.new
)
sapply(res, function(e) return (e$Name))
shiny::runApp('Sites/fxjollois.github.io/__specifique/prog-stat-tp11')
setwd("~/Sites/fxjollois.github.io/__specifique/prog-stat-tp11")
sci = read.table("../../donnees/scimagojr-1996-2014.csv",
header = T, sep = ";")
View(sci)
sci = read.table("../../donnees/scimagojr-1996-2014.csv",
header = T, sep = ";", quote = '"')
View(sci)
sci = read.table("../../donnees/scimagojr-1996-2014.csv",
header = T, sep = ";", quote = '"', dec = ",")
View(sci)
View(sci)
runApp()
subset(sci, Country == "France")
subset(sci, Country == "France")$Documents
agg = aggregate(Documents ~ Year, sci, sum)
ggplot(agg, aes(Year, Documents)) + geom_line()
library(ggplot2)
ggplot(agg, aes(Year, Documents)) + geom_line()
runApp()
runApp()
agg = aggregate(Documents ~ Country, sci, sum)
head(agg[order(agg$Documents, decreasing = TRUE),], 10)
runApp()
runApp()
install.packages(c("BH", "bookdown", "car", "chron", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "FactoMineR", "foreign", "ggplot2", "hms", "htmlwidgets", "jsonlite", "knitr", "lattice", "maptools", "Matrix", "mclust", "mgcv", "openssl", "proto", "quantreg", "R6", "Rcpp", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "Rmixmod", "rsconnect", "RSQLite", "scales", "scatterplot3d", "shiny", "shinyjs", "sp", "SparseM", "stringi", "survival", "tibble", "V8", "yaml"))
install.packages(c("BH", "bookdown", "car", "chron", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "FactoMineR", "foreign", "ggplot2", "hms", "htmlwidgets", "jsonlite", "knitr", "lattice", "maptools", "Matrix", "mclust", "mgcv", "openssl", "proto", "quantreg", "R6", "Rcpp", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "Rmixmod", "rsconnect", "RSQLite", "scales", "scatterplot3d", "shiny", "shinyjs", "sp", "SparseM", "stringi", "survival", "tibble", "V8", "yaml"))
install.packages(c("BH", "bookdown", "car", "chron", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "FactoMineR", "foreign", "ggplot2", "hms", "htmlwidgets", "jsonlite", "knitr", "lattice", "maptools", "Matrix", "mclust", "mgcv", "openssl", "proto", "quantreg", "R6", "Rcpp", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "Rmixmod", "rsconnect", "RSQLite", "scales", "scatterplot3d", "shiny", "shinyjs", "sp", "SparseM", "stringi", "survival", "tibble", "V8", "yaml"))
install.packages(c("BH", "bookdown", "car", "chron", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "FactoMineR", "foreign", "ggplot2", "hms", "htmlwidgets", "jsonlite", "knitr", "lattice", "maptools", "Matrix", "mclust", "mgcv", "openssl", "proto", "quantreg", "R6", "Rcpp", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "Rmixmod", "rsconnect", "RSQLite", "scales", "scatterplot3d", "shiny", "shinyjs", "sp", "SparseM", "stringi", "survival", "tibble", "V8", "yaml"))
install.packages(c("BH", "bookdown", "car", "chron", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "FactoMineR", "foreign", "ggplot2", "hms", "htmlwidgets", "jsonlite", "knitr", "lattice", "maptools", "Matrix", "mclust", "mgcv", "openssl", "proto", "quantreg", "R6", "Rcpp", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "Rmixmod", "rsconnect", "RSQLite", "scales", "scatterplot3d", "shiny", "shinyjs", "sp", "SparseM", "stringi", "survival", "tibble", "V8", "yaml"))
install.packages(c("BH", "bookdown", "car", "chron", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "FactoMineR", "foreign", "ggplot2", "hms", "htmlwidgets", "jsonlite", "knitr", "lattice", "maptools", "Matrix", "mclust", "mgcv", "openssl", "proto", "quantreg", "R6", "Rcpp", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "Rmixmod", "rsconnect", "RSQLite", "scales", "scatterplot3d", "shiny", "shinyjs", "sp", "SparseM", "stringi", "survival", "tibble", "V8", "yaml"))
install.packages(c("BH", "bookdown", "car", "chron", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "FactoMineR", "foreign", "ggplot2", "hms", "htmlwidgets", "jsonlite", "knitr", "lattice", "maptools", "Matrix", "mclust", "mgcv", "openssl", "proto", "quantreg", "R6", "Rcpp", "reshape2", "rgdal", "rgeos", "RgoogleMaps", "rmarkdown", "Rmixmod", "rsconnect", "RSQLite", "scales", "scatterplot3d", "shiny", "shinyjs", "sp", "SparseM", "stringi", "survival", "tibble", "V8", "yaml"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
sub = susbet(sci, Rank <= 10)
sub = subset(sci, Rank <= 10)
ggplot(sub, aes(Year, Rank, color = Country)) + geom_line()
ggplot(sub, aes(Year, factor(Rank), color = Country)) + geom_line()
ggplot(sub, aes(Year, Rank, color = Country)) + geom_line()
ggplot(sub, aes(Year, Rank, color = Country)) + geom_line() +
scale_y_discrete(limits = 1:10)
ggplot(sub, aes(Year, Rank, color = Country)) + geom_line() +
scale_y_discrete(limits = 10:1)
ggplot(sub, aes(Year, Rank, color = Country)) + geom_line() +
scale_y_discrete(limits = 1:10, breaks = 10:1)
ggplot(sub, aes(Year, Rank, color = Country)) + geom_line() +
scale_y_reverse(limits = 1:10)
ggplot(sub, aes(Year, Rank, color = Country)) + geom_line() +
scale_y_reverse(limits = c(10, 1))
ggplot(sub, aes(Year, Rank, color = Country)) + geom_line() +
scale_y_reverse(limits = c(10, 1), breaks = 1:10)
?mongolite
??mongolite
??handler
h = basicJSONHandler()
x = fromJSON("[1, 2, 3]", h)
x
h$value()
library(RJSONIO)
h = basicJSONHandler()
x = fromJSON("[1, 2, 3]", h)
x
h$value()
h
x
h$value()
fromJSON("[1, 2, 3]", h, simplify = TRU
)
fromJSON("[1, 2, 3]", h, simplify = TRUE)
fromJSON("[1, 2, 3]", simplify = TRUE)
fromJSON("[1, 2, 3]", simplify = FALSE)
??rmongodb
knitr::opts_chunk$set(fig.align = "center", warning = FALSE, message = FALSE)
ozone = maps::ozone
ggplot(mtcars, aes(factor(am))) + geom_bar() + facet_grid( ~ cyl)
ggplot(mtcars, aes(factor(am), fill = factor(cyl))) + geom_bar()
ggplot(mtcars, aes(factor(am), fill = factor(cyl))) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
xlab("am") + ylab("") + labs(fill = "cyl")
library(scales)
ggplot(mtcars, aes(factor(am))) + geom_bar() + facet_grid( ~ cyl)
ggplot(mtcars, aes(factor(am), fill = factor(cyl))) + geom_bar()
ggplot(mtcars, aes(factor(am), fill = factor(cyl))) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
xlab("am") + ylab("") + labs(fill = "cyl")
ggplot(mtcars, aes(factor(am))) + geom_bar() + facet_grid( ~ cyl)
ggplot(mtcars, aes(factor(am), fill = factor(cyl))) + geom_bar()
ggplot(mtcars, aes(factor(am), fill = factor(cyl))) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
xlab("am") + ylab("") + labs(fill = "cyl")
mel
??GeomRasterAnn
m = get_map("Paris,France")
library(ggmap)
library(ggmap)
m = get_map("Paris,France")
ggmap(m)
install.packages("ggplot2")
install.packages("ggmap")
library(ggmap)
m = get_map("Paris,France")
ggmap(m)
