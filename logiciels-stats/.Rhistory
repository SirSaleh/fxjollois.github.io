v
kable(head(iris), format = "latex", caption = "Title of the table")
kable(head(iris), format = "html", caption = "Title of the table")
quali
vecteur = adult$class
enPourcent <- function(p) return(paste(round(p * 100, 2), "%"))
t = table(vecteur)
p = prop.table(t)
df = setNames(data.frame(t, enPourcent(p)), c("Modalité", "Occurence", "Proportion"))
if (cum) {
df["Prop. Cumulée"] = enPourcent(cumsum(p))
kable(df, align = c("l", "r", "r", "r"))
} else {
kable(df, align = c("l", "r", "r"))
}
cum = FALSE
df
df["Prop. Cumulée"] = enPourcent(cumsum(p))
kable(df, align = c("l", "r", "r", "r"))
kable(df, align = c("l", "r", "r"))
tabFreq <- function(vecteur, cum = FALSE) {
enPourcent <- function(p) return(paste(round(p * 100, 2), "%"))
t = table(vecteur)
p = prop.table(t)
df = setNames(data.frame(t, enPourcent(p)), c("Modalité", "Occurence", "Proportion"))
if (cum) {
df["Prop. Cumulée"] = enPourcent(cumsum(p))
kable(df, align = c("l", "r", "r", "r"))
} else {
kable(df, align = c("l", "r", "r"))
}
}
tabFreq(adult$class)
tabFreq(adult$class, TRUE)
tabFreq(adult$workclass)
ggplot(adult, aes(x = workclass, fill = workclass)) + geom_bar() +
ggtitle(v) + axeXvide + axeYvide
ggplot(adult, aes(x = workclass, fill = workclass)) + geom_bar() +
axeXvide + axeYvide
tabFreq(adult$education)
tabFreq(adult$"education-num"")
")
tabFreq(adult$"education-num")
res = kable(df, align = c("l", "r", "r", "r"))
tabFreq <- function(vecteur, cum = FALSE) {
enPourcent <- function(p) return(paste(round(p * 100, 2), "%"))
t = table(vecteur)
p = prop.table(t)
df = setNames(data.frame(t, enPourcent(p)), c("Modalité", "Occurence", "Proportion"))
if (cum) {
df["Prop. Cumulée"] = enPourcent(cumsum(p))
res = kable(df, align = c("l", "r", "r", "r"))
} else {
res = kable(df, align = c("l", "r", "r"))
}
return (res)
}
tabFreq(adult$`education-num`)
tabFreq(adult$class)
tabFreq(adult$"education-num", cum = TRUE)
table(adult$education, adult$`education-num`)
apply(table(adult$education, adult$`education-num`), 1, which.max)
order(apply(table(adult$education, adult$`education-num`), 1, which.max))
qui <- apply(table(adult$education, adult$`education-num`), 1, which.max)
qui[order(qui)]
t = tabFreq(adult$"education-num", cum = TRUE)
t
tabFreq <- function(vecteur, cum = FALSE, names = NULL) {
enPourcent <- function(p) return(paste(round(p * 100, 2), "%"))
t = table(vecteur)
p = prop.table(t)
df = setNames(data.frame(t, enPourcent(p)), c("Modalité", "Occurence", "Proportion"))
if (names) {
df$Modalité = names
}
if (cum) {
df["Prop. Cumulée"] = enPourcent(cumsum(p))
res = kable(df, align = c("l", "r", "r", "r"))
} else {
res = kable(df, align = c("l", "r", "r"))
}
return (res)
}
qui <- apply(table(adult$education, adult$`education-num`), 1, which.max)
t = tabFreq(adult$"education-num", cum = TRUE, names = qui[order(qui)])
tabFreq(adult$"education-num", cum = TRUE, names = qui[order(qui)])
tabFreq <- function(vecteur, cum = FALSE, names = NULL) {
enPourcent <- function(p) return(paste(round(p * 100, 2), "%"))
t = table(vecteur)
p = prop.table(t)
df = setNames(data.frame(t, enPourcent(p)), c("Modalité", "Occurence", "Proportion"))
if (length(names) > 0) {
df$Modalité = names
}
if (cum) {
df["Prop. Cumulée"] = enPourcent(cumsum(p))
res = kable(df, align = c("l", "r", "r", "r"))
} else {
res = kable(df, align = c("l", "r", "r"))
}
return (res)
}
tabFreq(adult$"education-num", cum = TRUE, names = qui[order(qui)])
qui[order(qui)]
names(qui[order(qui)])
tabFreq(adult$"education-num", cum = TRUE, names = names(qui[order(qui)]))
educationLabels = names(qui[order(qui)])
tabFreq(adult$"education-num", cum = TRUE, names = educationLabels)
ggplot(adult, aes(x = education, fill = education)) + geom_bar() +
axeXvide + axeYvide
sub("-", ".", read.table("adult.names", sep = ":",
skip = 96, stringsAsFactors = F)[,1]
)
gsub("-", ".", read.table("adult.names", sep = ":",
skip = 96, stringsAsFactors = F)[,1])
v = "age"
sub = setNames(adult[v], "variable")
boxplot = ggplot(sub, aes(x=1, y=variable)) + geom_boxplot() +
coord_flip() + ylim(range(sub$variable)) + ggtitle(v) + axeXvide + axeYvide
hist = ggplot(sub, aes(x=variable)) + geom_histogram(bins = 10) +
xlim(range(sub$variable)) + axeXvide + axeYvide
print(plot_grid(boxplot, hist, labels = NULL, align = "v", ncol = 1))
names(adult) = c(
gsub("-", ".", read.table("adult.names", sep = ":",
skip = 96, stringsAsFactors = F)[,1]),
# Autre façon de faire
# unlist(
#    lapply(
#        tail(readLines("adult.names"), 14),
#        function(n) return (strsplit(n, ":")[[1]][1]))
#    ),
"class"
)
tabFreq(adult$education.num, cum = TRUE, names = educationLabels)
ggplot(adult, aes(x = education.num, fill = education.num)) + geom_bar() +
axeXvide + axeYvide
ggplot(adult, aes(x = education.num, fill = factor(education.num))) + geom_bar() +
axeXvide + axeYvide
ggplot(adult, aes(x = education.num, fill = factor(education.num))) + geom_bar() +
scale_fill_discrete(labels=educationLabels) + axeXvide + axeYvide
ggplot(adult, aes(x = education.num, fill = factor(education.num))) + geom_bar() +
scale_fill_discrete(name = element_blank(), labels=educationLabels) + axeXvide + axeYvide
t
ggplot(adult, aes(x = marital.status, fill = marital.status)) + geom_bar() +
axeXvide + axeYvide
tabFreq(adult$occupation)
ggplot(adult, aes(x = occupation, fill = occupation)) + geom_bar() +
axeXvide + axeYvide
tabFreq(adult$relationship)
ggplot(adult, aes(x = relationship, fill = relationship)) + geom_bar() +
axeXvide + axeYvide
tabFreq(adult$race)
ggplot(adult, aes(x = race, fill = race)) + geom_bar() +
axeXvide + axeYvide
ggplot(adult, aes(x = sex, fill = sex)) + geom_bar() +
axeXvide + axeYvide
ggplot(adult, aes(x = 1, fill = sex)) + geom_bar(width = 1) + coord_polar(theta = "y") +
axeXvide + axeYvide
ggplot(adult, aes(x = 1, fill = class)) + geom_bar(width = 1) + coord_polar(theta = "y") +
axeXvide + axeYvide + colClass
k
sansTicks = theme(axis.ticks = element_blank())
ggplot(adult, aes(x = 1, fill = class)) + geom_bar(width = 1) + coord_polar(theta = "y") +
axeXvide + axeYvide + sansTicks + colClass
sansTicks = theme(axis.ticks = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(adult, aes(x = 1, fill = class)) + geom_bar(width = 1) + coord_polar(theta = "y") +
axeXvide + axeYvide + sansTicks + colClass
ggplot(adult, aes(x = 1, fill = sex)) + geom_bar(width = 1) + coord_polar(theta = "y") +
axeXvide + axeYvide + sansTicks
tabFreq(adult$native.country)
ggplot(adult, aes(x = native.country, fill = native.country)) + geom_bar() +
axeXvide + axeYvide
tabFreq(adult$native.country)
aggregate(age ~ class, adult, mean)
aggregate(age ~ class, adult, function(v) {
return (c(Moyenne = mean(v), Min = min(v)))
})
aggregate(age ~ class, adult, function(v) {
return (mean(v), min(v)))
})
aggregate(age ~ class, adult, function(v) {
return (mean(v), min(v))
})
aggregate(age ~ class, adult, function(v) {
return (c(mean(v), min(v)))
})
aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), min(v))))
})
aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), min(v)), 2))
})
aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
})
setNames(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}), c("Moyenne", "Ecart-Type", "Minimum", "Médiane", "Maximum")
)
setNames(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}), c("Class", Moyenne", "Ecart-Type", "Minimum", "Médiane", "Maximum"))
```
setNames(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}), c("Class", "Moyenne", "Ecart-Type", "Minimum", "Médiane", "Maximum"))
aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
})
setNames(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}), c("Class", "Moyenne", "Ecart-Type", "Minimum", "Médiane", "Maximum"))
aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
})
a = aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
})
dim(a)
a[1,]
a[,1]
a[,2]
?aggregate
setNames(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}), c("Class", c("Moyenne", "Ecart-Type", "Minimum", "Médiane", "Maximum")))
setNames(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}), c(a = "Class", b = c("Moyenne", "Ecart-Type", "Minimum", "Médiane", "Maximum")))
setNames(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}), c("Class","Moyenne"))
as.data.frame(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}))
setNames(as.data.frame(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
})), c("Class", "Moyenne", "Ecart-Type", "Minimum", "Médiane", "Maximum"))
as.data.frame(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}))
as.data.frame(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
a = }))
a = as.data.frame(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}))
dim(a)
a = data.frame(aggregate(age ~ class, adult, function(v) {
return (round(c(mean(v), sd(v), min(v), median(v), max(v)), 2))
}))
dim(a)
class(a)
class(a[1,2])
names(a)
kable(tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}))
tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
})
t = tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
})
t
as.data.frame(t)
dim(t)
data.frame(t)
dim(t)
length(t)
t[[1]]
t(t)
as.data.frame(t(t))
names(t)
sapply(t, function(c) return(c))
kable(sapply, tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}), function(c) return(c)))
kable(sapply, tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}), function(c) return(c))
tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
})
kable(sapply, tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}), function(c) return(c))
t
sapply(t, function(c) return(c))
tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
})
sapply, tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}), function(c) return(c))
kable(sapply(tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}), function(c) return(c))
)
ggplot2(adult, aes(x=class, y=age))
ggplot(adult, aes(x=class, y=age))
ggplot(adult, aes(x=class, y=age)) + geom_boxplot()
ggplot(adult, aes(x=class, y=age, fill=class)) + geom_boxplot() + colClass +
axeXvide + axeYvide
ggplot(adult, aes(x=class, y=age, fill=class)) + geom_boxplot() + colClass +
axeXvide + axeYvide + facet_grid(sex ~ 1)
ggplot(adult, aes(x=class, y=age, fill=class)) + geom_boxplot() + colClass +
axeXvide + axeYvide + facet_grid(1 ~ sex)
aggregate(age ~ class + sex, adult, mean)
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile()
res = aggregate(age ~ class + sex, adult, mean)
kable(res)
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile()
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile() + scale_fill_gradient()
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile() + scale_fill_gradient(1)
?scale_fill_gradient
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile() + scale_fill_gradient2()
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile() + scale_fill_gradient3()
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile() + scale_fill_gradient1()
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile() + scale_fill_gradient()
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile() +
scale_fill_gradient(low = "green", high = "blue")
ggplot(adult, aes(x=hours.per.week, y=age, fill=class)) + geom_point() + colClass
ggplot(adult, aes(x=hours.per.week, y=age, color=class)) + geom_point() + colClass
ggplot(adult, aes(x=hours.per.week, y=age, color=class)) + geom_point() + colClass +
facet_grid(1 ~ class)
ggplot(adult, aes(x=hours.per.week, y=age, color=class)) + geom_tile() + colClass +
facet_grid(1 ~ class)
ggplot(adult, aes(x=hours.per.week, y=age, color=class)) + geom_area() + colClass +
facet_grid(1 ~ class)
ggplot(adult, aes(x=hours.per.week, y=age, color=class)) + geom_tile() + colClass +
facet_grid(1 ~ class)
ggplot(adult, aes(x=hours.per.week, y=age, color=class)) + geom_bin2d() + colClass +
facet_grid(1 ~ class)
ggplot(adult, aes(x=hours.per.week, y=age)) + geom_bin2d()
ggplot(adult, aes(x=hours.per.week, y=age)) + geom_bin2d() +
facet_grid(1 ~ class)
# Librairies utilisées dans ce document
library(ggplot2)
library(knitr)
library(cowplot)
theme_set(theme_gray())
# Config pour ggplot2
axeXvide = theme(axis.title.x = element_blank())
axeYvide = theme(axis.title.y = element_blank())
sansTicks = theme(axis.ticks = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
# Paramètres pour tous les "chunks"
# Ici, "echo = FALSE" pour ne pas voir le code apparaître dans la page résultat
opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# Importation des données
adult = read.table("adult.data", sep = ",", na.strings = " ?")
names(adult) = c(
gsub("-", ".", read.table("adult.names", sep = ":",
skip = 96, stringsAsFactors = F)[,1]),
# Autre façon de faire
# unlist(
#    lapply(
#        tail(readLines("adult.names"), 14),
#        function(n) return (strsplit(n, ":")[[1]][1]))
#    ),
"class"
)
# Création de deux vecteurs contenant les noms des variables quantitatives et qualitatives
quanti = c("age", "capital-gain", "capital-loss", "hours-per-week")
quali = c("workclass", "education", "marital-status", "occupation", "relationship", "race", "sex", "native-country")
# Nom des modalités de education dans l'ordre de education-num
qui <- apply(table(adult$education, adult$education.num), 1, which.max)
educationLabels = names(qui[order(qui)])
rm(qui)
# Variable flnweight : poids permettant de rééquilibrer l'échantillon, non prise en compte ici
# Fonction de création d'un tableau occurence/fréquence/et cumulé (si besoin)
tabFreq <- function(vecteur, cum = FALSE, names = NULL) {
enPourcent <- function(p) return(paste(round(p * 100, 2), "%"))
t = table(vecteur)
p = prop.table(t)
df = setNames(data.frame(t, enPourcent(p)), c("Modalité", "Occurence", "Proportion"))
if (length(names) > 0) {
df$Modalité = names
}
if (cum) {
df["Prop. Cumulée"] = enPourcent(cumsum(p))
res = kable(df, align = c("l", "r", "r", "r"))
} else {
res = kable(df, align = c("l", "r", "r"))
}
return (res)
}
# Couleurs pour les modalités de classes
colClass = scale_fill_manual(values=c("#CC6666", "#66CC99"))
tabFreq(adult$class)
ggplot(adult, aes(x = 1, fill = class)) + geom_bar(width = 1) + coord_polar(theta = "y") +
axeXvide + axeYvide + sansTicks + colClass
# La fonction kable() du package knitr permet d'écrire un tableau au format Markdown
# pour que son affichage dans la page résultat soit plus esthétique
kable(sapply(adult[,quanti], function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}))
quanti = c("age", "capital.gain", "capital.loss", "hours-per-week")
quali = c("workclass", "education", "marital.status", "occupation", "relationship", "race", "sex", "native.country")
ggplot(adult, aes(x = 1, fill = class)) + geom_bar(width = 1) + coord_polar(theta = "y") +
axeXvide + axeYvide + sansTicks + colClass
# La fonction kable() du package knitr permet d'écrire un tableau au format Markdown
# pour que son affichage dans la page résultat soit plus esthétique
kable(sapply(adult[,quanti], function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}))
quanti
quanti = c("age", "capital.gain", "capital.loss", "hours.per.week")
# La fonction kable() du package knitr permet d'écrire un tableau au format Markdown
# pour que son affichage dans la page résultat soit plus esthétique
kable(sapply(adult[,quanti], function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}))
for (v in quanti) {
sub = setNames(adult[v], "variable")
boxplot = ggplot(sub, aes(x=1, y=variable)) + geom_boxplot() +
coord_flip() + ylim(range(sub$variable)) + ggtitle(v) + axeXvide + axeYvide
hist = ggplot(sub, aes(x=variable)) + geom_histogram(bins = 10) +
xlim(range(sub$variable)) + axeXvide + axeYvide
print(plot_grid(boxplot, hist, labels = NULL, align = "v", ncol = 1))
}
rm(v, sub, hist, boxplot) # pour nettoyer l'espace
tabFreq(adult$workclass)
ggplot(adult, aes(x = workclass, fill = workclass)) + geom_bar() +
axeXvide + axeYvide
tabFreq(adult$education.num, cum = TRUE, names = educationLabels)
ggplot(adult, aes(x = education.num, fill = factor(education.num))) + geom_bar() +
scale_fill_discrete(name = element_blank(), labels=educationLabels) + axeXvide + axeYvide
kable(sapply(tapply(adult$age, adult$class, function(v) {
return (round(c(Moyenne   = mean(v, na.rm = TRUE),
EcartType = sd(v, na.rm = TRUE),
Minimum   = min(v, na.rm = TRUE),
Médiane   = median(v, na.rm = TRUE),
Maximum   = max(v, na.rm = TRUE)
), 2))
}), function(c) return(c)))
res = aggregate(age ~ class + sex, adult, mean)
kable(res)
ggplot(adult, aes(x=class, y=age, fill=class)) + geom_boxplot() + colClass +
axeXvide + axeYvide + facet_grid(1 ~ sex)
ggplot(res, aes(x=class, y=sex, fill=age)) + geom_tile() +
scale_fill_gradient(low = "green", high = "blue")
rm(res)
ggplot(adult, aes(x=hours.per.week, y=age, color=class)) + geom_point() + colClass +
facet_grid(1 ~ class)
ggplot(adult, aes(x=hours.per.week, y=age)) + geom_bin2d() +
facet_grid(1 ~ class)
