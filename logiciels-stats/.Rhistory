x = v[seq(1,15,by=2)],
y = v[seq(2,16,by=2)],
position = 1:8
)
g = ggplot(don, aes(x, y)) + xlim(0, 100) + ylim(0, 100) +
geom_polygon(fill = "white", col = "black") +
geom_text(aes(label = position)) +
theme_void()
if (!is.null(titre))
g = g + ggtitle(titre)
g
}
p = dessineChiffre(pen.tra[1,1:16], pen.tra[1,17])
p
??multiplot
install.packages("gridExtra")
0:9
ch=0
prem = subset(pen, chiffre = ch))[1,]
prem = subset(pen, chiffre = ch)[1,]
prem
dessineChiffre(prem, ch)
prem = subset(pen, chiffre == ch)[1,]
dessineChiffre(prem, ch)
premier = lapply(0:9, function(ch) {
prem = subset(pen, chiffre == ch)[1,]
dessineChiffre(prem, ch)
})
?grid.arrange
??grid.arrange
library(gridExtra)
grid.arrange(premier[[1]], premier[[2]])
grid.arrange(premier[[1]], premier[[2]], ncol = 2)
grid.arrange(premier, ncol = 2)
marrangeGrob(premier, nrow = 2, ncol = 5)
arrangeGrob(premier, nrow = 2, ncol = 5)
??grob
premier = lapply(0:9, function(ch) {
prem = subset(pen, chiffre == ch)[1,]
ggplotGrob(dessineChiffre(prem, ch))
})
grid.arrange(premier, nrow = 2, ncol = 5)
premier[[1]]
class(premier[[1]])
premier = lapply(0:9, function(ch) {
prem = subset(pen, chiffre == ch)[1,]
grobTree(dessineChiffre(prem, ch))
})
grid.arrange(premier, nrow = 2, ncol = 5)
marrangeGrob(premier, nrow = 2, ncol = 5, top = "")
premier = lapply(0:9, function(ch) {
prem = subset(pen, chiffre == ch)[1,]
dessineChiffre(prem, ch)
})
marrangeGrob(premier, nrow = 2, ncol = 5, top = "")
pen.means = apply(pen[-17], 2, tapply, pen$chiffre, mean)
pen.means
trace.moyen = lapply(0:9, function(ch) {
dessineChiffre(pen.means[ch-1,], ch)
})
marrangeGrob(trace.moyen, nrow = 2, ncol = 5, top = "")
trace.moyen = lapply(0:9, function(ch) {
dessineChiffre(pen.means[ch+1,], ch)
})
marrangeGrob(trace.moyen, nrow = 2, ncol = 5, top = "")
dessineChiffre <- function(v, titre = NULL) {
if (is.data.frame(v))
v = unlist(v)
don = data.frame(
x = v[seq(1,15,by=2)],
y = v[seq(2,16,by=2)],
position = 1:8
)
g = ggplot(don, aes(x, y)) + xlim(0, 100) + ylim(0, 100) +
geom_path(fill = "white", col = "black") +
geom_text(aes(label = position)) +
theme_void()
if (!is.null(titre))
g = g + ggtitle(titre)
g
}
# pour tester : dessineChiffre(pen.tra[1,1:16], pen.tra[1,17])
premier = lapply(0:9, function(ch) {
prem = subset(pen, chiffre == ch)[1,]
dessineChiffre(prem, ch)
})
marrangeGrob(premier, nrow = 2, ncol = 5, top = "")
dessineChiffre <- function(v, titre = NULL) {
if (is.data.frame(v))
v = unlist(v)
don = data.frame(
x = v[seq(1,15,by=2)],
y = v[seq(2,16,by=2)],
position = 1:8
)
g = ggplot(don, aes(x, y)) + xlim(0, 100) + ylim(0, 100) +
geom_path() +
geom_text(aes(label = position)) +
theme_void()
if (!is.null(titre))
g = g + ggtitle(titre)
g
}
# pour tester : dessineChiffre(pen.tra[1,1:16], pen.tra[1,17])
premier = lapply(0:9, function(ch) {
prem = subset(pen, chiffre == ch)[1,]
dessineChiffre(prem, ch)
})
marrangeGrob(premier, nrow = 2, ncol = 5, top = "")
trace.moyen = lapply(0:9, function(ch) {
dessineChiffre(pen.means[ch+1,], ch)
})
marrangeGrob(trace.moyen, nrow = 2, ncol = 5, top = "")
knitr::kable(pen.means)
knitr::kable(round(pen.means))
trace.moyen = lapply(0:9, function(ch) {
dessineChiffre(pen.means[ch+1,], ch)
})
marrangeGrob(trace.moyen, nrow = 2, ncol = 5, top = "")
ggplot(subset(pen, chiffre == 0), aes(chiffre, X1)) + geom_boxplot()
ggplot(pen, aes(chiffre, X1)) + geom_boxplot()
ggplot(pen, aes(factor(chiffre), X1, color = chiffre)) + geom_boxplot()
ggplot(pen, aes(factor(chiffre), X1, color = factor(chiffre))) + geom_boxplot()
ggplot(pen, aes(factor(chiffre), X1, fill = factor(chiffre))) + geom_boxplot()
pen$chiffre = factor(pen$chiffre)
ggplot(occur.chiffre, aes(chiffre, fill = chiffre)) + geom_bar(aes(weight=occurences)) +
ylab("")
premier = lapply(0:9, function(ch) {
prem = subset(pen, chiffre == ch)[1,]
dessineChiffre(prem, ch)
})
marrangeGrob(premier, nrow = 2, ncol = 5, top = "")
knitr::kable(round(pen.means))
trace.moyen = lapply(0:9, function(ch) {
dessineChiffre(pen.means[ch+1,], ch)
})
marrangeGrob(trace.moyen, nrow = 2, ncol = 5, top = "")
ggplot(pen, aes(factor(chiffre), X1, fill = chiffre)) + geom_boxplot()
ggplot(pen, aes(chiffre, X1, fill = chiffre)) + geom_boxplot()
ggplot(pen, aes_string("chiffre", "X1", fill = "chiffre")) + geom_boxplot()
names(pen)[-17]
for (var in names(pen)[-17])
ggplot(pen, aes_string("chiffre", var, fill = "chiffre")) + geom_boxplot() +
ggtitle(var)
for (var in names(pen)[-17]) {
g = ggplot(pen, aes_string("chiffre", var, fill = "chiffre")) + geom_boxplot() +
ggtitle(var)
print(g)
}
distrib.coord = lapply(names(pen)[-17], function(var) {
ggplot(pen, aes_string("chiffre", var, fill = "chiffre")) + geom_boxplot() +
ggtitle(var)
})
marrangeGrob(trace.moyen, nrow = 8, ncol = 2, top = "")
var = "X1"
ggplot(pen, aes_string("chiffre", var, fill = "chiffre")) + geom_boxplot() +
ggtitle(var) +
theme(legend.position = "none")
ggplot(pen, aes_string("chiffre", var, fill = "chiffre")) + geom_boxplot() +
ggtitle(var) +
theme(legend.position = "none") + ylab("") + xlab("")
distrib.coord = lapply(names(pen)[-17], function(var) {
ggplot(pen, aes_string("chiffre", var, fill = "chiffre")) + geom_boxplot() +
ggtitle(var) +
theme(legend.position = "none") + ylab("") + xlab("")
})
marrangeGrob(distrib.coord, nrow = 8, ncol = 2, top = "")
marrangeGrob(distrib.coord, nrow = 2, ncol = 2, top = "")
acp = PCA(pen, graph = FALSE, quali.sup = 17)
library(FactoMineR)
acp = PCA(pen, graph = FALSE, quali.sup = 17)
plot(acp)
plot(acp, habillage = "quali")
plot(acp, habillage = 17)
acp$eig
ggplot(acp$eig, aes(factor(1:16), weight=eigenvalue)) +
geom_hline(yntercept = 1, linetype = 2, col = "gray50") +
geom_bar()
ggplot(acp$eig, aes(factor(1:16), weight=eigenvalue)) +
geom_hline(yintercept = 1, linetype = 2, col = "gray50") +
geom_bar()
ggplot(acp$eig, aes(factor(1:16), weight=eigenvalue)) +
geom_hline(yintercept = 1, linetype = 2, col = "gray50") +
geom_bar() + xlab("Composantes") + ylab("")
names(acp$eig)
ggplot(acp$eig, aes(1:16, "cumulative percentage of variance"))
ggplot(acp$eig, aes(1:16, "cumulative percentage of variance")) + geom_line()
ggplot(acp$eig, aes(1:16, cumulative.percentage.of.variance)) + geom_line()
ggplot(setNames(acp$eig, c("eigen", "pct", "pctcum")), aes(1:16, pctcum)) + geom_line()
ggplot(setNames(acp$eig, c("eigen", "pct", "pctcum")), aes(1:16, pctcum)) + geom_line() +
ylim(0, 100) + ylab("") + xlab("Composantes")
acp$ind$coord
names(acp$ind$coord)
colnames(acp$ind$coord)
data.frame(acp$ind$coord, chiffre = pen$chiffre)
head(data.frame(acp$ind$coord, chiffre = pen$chiffre))
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col = chiffre)) +
geom_point()
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col = chiffre)) +
geom_point() + facet_wrap(~chiffre)
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col = chiffre)) +
geom_point() + facet_wrap(.~chiffre)
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col = chiffre)) +
geom_point() + facet_grid(.~chiffre)
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col = chiffre)) +
geom_point() + facet_wrap(.~chiffre) + theme_void()
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2)) +
geom_point() + facet_wrap(.~chiffre) + theme_void()
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2)) +
geom_point() + facet_wrap(~chiffre) + theme_void()
?facet_wrap
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2)) +
geom_point() + facet_wrap(~chiffre) + theme_void()
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col =  chiffre)) +
geom_point() + facet_wrap(~chiffre) + theme_void()
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col =  chiffre)) +
geom_point() + facet_wrap(~chiffre, nrow = 2) + theme_void()
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col =  chiffre)) +
geom_point() + facet_wrap(~chiffre, nrow = 2) + theme_void(legend.position = "none")
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col =  chiffre)) +
geom_point() + facet_wrap(~chiffre, nrow = 2) + theme_void() +
theme(legend.position = "none")
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col =  chiffre)) +
geom_point() + facet_wrap(~chiffre, nrow = 2) + theme_minimal() +
theme(legend.position = "none")
ggplot(data.frame(acp$ind$coord, chiffre = pen$chiffre), aes(Dim.1, Dim.2, col =  chiffre)) +
geom_point() + facet_wrap(~chiffre, nrow = 2) +
theme(legend.position = "none")
?hclust
classif = lapply(0:9, function(ch) {
sub = subset(pen, chiffre == ch)
cah = hclust(dist(sub), "ward.D2")
km = lapply(1:10, function(k) {
return(kmeans(sub, k))
})
return(list(cah = cah, km = km))
})
length(classif)
classif[[1]]
classif[[1]]$cah
plot(classif[[1]]$cah)
?grid.arrange
?grid.echo
??grid.echo
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("gridGraphics")
plot(classif[[1]]$cah, labels = NULL)
plot(classif[[1]]$cah, labels = NULL)
plot(classif[[1]]$cah, labels = FALSE)
plot(classif[[1]]$cah, labels = FALSE, hang = -1)
par(mar = c(0, 2, 0, 0) + .1)
plot(classif[[1]]$cah, labels = FALSE, hang = -1, main = "")
lk = 1:10
classif = lapply(0:9, function(ch) {
sub = subset(pen, chiffre == ch)
cah = hclust(dist(sub), "ward.D2")
km = lapply(lk, function(k) {
return(kmeans(sub, k))
})
I = km[[1]]$totss
W = unlist(lapply(km, function(r) return(r$tot.withinss)))
B = unlist(lapply(km, function(r) return(r$betweenss)))
r2 = B / I
PsF = (r2 / (lk - 1)) / ((1 - r2) / (nrow(sub) - lk))
return(list(cah = cah, km = km, r2 = r2, PsF = PsF))
})
qplot(lk, classif[[1]]$r2)
library(ggplot2)
library(gridExtra)
library(FactoMineR)
qplot(lk, classif[[1]]$r2)
qplot(lk, classif[[1]]$r2, geom = "line")
qplot(lk, classif[[1]]$r2, geom = "line") + ylab("")
qplot(factor(lk), classif[[1]]$r2, geom = "line") + ylab("")
qplot(lk, classif[[1]]$r2, geom = "line") + ylab("")
qplot(lk, classif[[1]]$r2, geom = "line") + ylab("") + scale_x_continuous(breaks = lk)
grid.arrange(
qplot(lk, classif[[1]]$r2, geom = "line") + ylab("") + scale_x_continuous(breaks = lk)
qplot(lk, classif[[1]]$PsF, geom = "line") + ylab("") + scale_x_continuous(breaks = lk)
)
grid.arrange(
qplot(lk, classif[[1]]$r2, geom = "line") + ggtitle("r2") +
ylab("") + scale_x_continuous(breaks = lk),
qplot(lk, classif[[1]]$PsF, geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
)
for (ch in 0:9) {
res = classif[[ch+1]]
par(mar = c(0, 2, 0, 0) + .1)
plot(res$cah, labels = FALSE, hang = -1, main = ch)
grid.arrange(
qplot(lk, res$r2, geom = "line") + ggtitle("r2") +
ylab("") + scale_x_continuous(breaks = lk),
qplot(lk, res$PsF, geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
)
}
dessineChiffre(apply(pen, 2, mean))
apply(pen, 2, mean)
apply(pen, 2, mean, na.rm = TRUE)
apply(pen[-17], 2, mean, na.rm = TRUE)
apply(pen[-17], 2, mean)
dessineChiffre(apply(pen[-17], 2, mean))
dessineChiffre(apply(pen[pen$chiffre==1,-17], 2, mean))
install.packages("ggdendro")
res$cah
dendro_data(res$cah)
library(ggdendro)
dendro_data(res$cah)
ggdendrogram(res$cah)
ggdendrogram(res$cah)
grid.arrange(
ggdendrogram(res$cah),
qplot(lk, res$r2, geom = "line") + ggtitle("r2") +
ylab("") + scale_x_continuous(breaks = lk),
qplot(lk, res$PsF, geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
)
ggdendrogram(res$cah) + ggtitle("test")
classif.plot = lapply(0:9, function(ch) {
res = classif[[ch+1]]
return(list(
ggdendrogram(res$cah) + ggtitle(ch),
qplot(lk, res$r2, geom = "line") + ggtitle("r2") +
ylab("") + scale_x_continuous(breaks = lk),
qplot(lk, res$PsF, geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
))
})
marrangeGrob(classif.plot, nrow = 3)
marrangeGrob(classif.plot, nrow = 3, ncol = 1)
for (ch in 0:9) {
marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = ch)
}
classif.plot[[ch+1]]
marrangeGrob(classif.plot[[ch+1]])
grid.arrange(classif.plot[[ch+1]])
marrangeGrob(classif.plot[[ch+1]], nrow=3, ncol=1)
classif.plot = lapply(classif, function(res) {
return(list(
ggdendrogram(res$cah),
qplot(lk, res$r2, geom = "line") + ggtitle("r2") +
ylab("") + scale_x_continuous(breaks = lk),
qplot(lk, res$PsF, geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
))
})
for (ch in 0:9) {
marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = ch)
}
k = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
data.frame(chiffre = 0:9, "k choisi" = k, check.names = FALSE)
print(marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = ch))
for (ch in 0:9) {
print(marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = ch))
}
ch
?marrangeGrob
print(marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = "test"))
print(marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = ch))
print(marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = paste("Chiffre :", ch)))
classif.plot = lapply(classif, function(res) {
return(list(
ggdendrogram(res$cah),
qplot(lk, res$r2, geom = "line") + ggtitle("r2") +
ylab("") + scale_x_continuous(breaks = lk),
qplot(lk, res$PsF, geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
))
})
for (ch in 0:9) {
print(marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = paste("Chiffre :", ch)))
}
k = c(2, 4, 3, 2, 2, 2, 2, 4, 4, 4)
data.frame(chiffre = 0:9, "k choisi" = k, check.names = FALSE)
knitr::kable(data.frame(chiffre = 0:9, "k choisi" = k, check.names = FALSE))
?kable
knitr::kable(data.frame(chiffre = 0:9, "k choisi" = k, check.names = FALSE),
align = c("c", "c"))
dir()p
dir()
ch = 0
kk = 2
part = classif[[ch+1]]$km[[kk]]$cluster
part
sub = data.frame(acp$ind$coord[pen$chiffre == ch,], part = part)
ggplot(sub, aes(Dim.1, Dim.2)) + geom_point() + facet_grid(.~part)
tmoy = classif[[ch+1]]$km[[kk]]$mean
tmoy
classif[[ch+1]]$km[[kk]]
names(classif[[ch+1]]$km[[kk]])
tmoy = classif[[ch+1]]$km[[kk]]$centers
tmpy
tmoy
lk = 1:10
classif = lapply(0:9, function(ch) {
sub = subset(pen, chiffre == ch)[-17]
cah = hclust(dist(sub), "ward.D2")
km = lapply(lk, function(k) {
return(kmeans(sub, k))
})
I = km[[1]]$totss
W = unlist(lapply(km, function(r) return(r$tot.withinss)))
B = unlist(lapply(km, function(r) return(r$betweenss)))
r2 = B / I
PsF = (r2 / (lk - 1)) / ((1 - r2) / (nrow(sub) - lk))
return(list(cah = cah, km = km, r2 = r2, PsF = PsF))
})
classif.plot = lapply(classif, function(res) {
return(list(
ggdendrogram(res$cah),
qplot(lk, res$r2, geom = "line") + ggtitle("r2") +
ylab("") + scale_x_continuous(breaks = lk),
qplot(lk, res$PsF, geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
))
})
for (ch in 0:9) {
print(marrangeGrob(classif.plot[[ch+1]], nrow = 3, ncol = 1, top = paste("Chiffre :", ch)))
}
res$PsF
qplot(lk[-1], res$PsF[-1], geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
qplot(lk[-1], res$PsF[-1], geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk) + xlim(lk)
qplot(lk[-1], res$PsF[-1], geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk) + xlim(range(lk))
qplot(lk[-1], res$PsF[-1], geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk) #+ xlim(range(lk))
res$PsF[1]=NA
qplot(lk, res$PsF, geom = "line") + ggtitle("Pseudo-F") +
ylab("") + scale_x_continuous(breaks = lk)
ch = 0
kk = 2
part = classif[[ch+1]]$km[[kk]]$cluster
tmoy = data.frame(classif[[ch+1]]$km[[kk]]$centers, id = 1:kk)
melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id")
library(reshape2)
melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id")
data.frame(
setNames(melt(tmoy[,c(seq(1,15,by=2),17)], id.vars = "id"), c("id", "xvar", "x")),
setNames(melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id"), c("id", "yvar", "y"))
)
temp = data.frame(
setNames(melt(tmoy[,c(seq(1,15,by=2),17)], id.vars = "id"), c("id", "xvar", "x")),
setNames(melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id"), c("id", "yvar", "y"))
)
ggplot(temp, aes(x, y, group = 1)) + geom_path()
ggplot(temp, aes(x, y, group = 1)) + geom_path() + facet_grid(.~id)
temp = transform(data.frame(
setNames(melt(tmoy[,c(seq(1,15,by=2),17)], id.vars = "id"), c("id", "xvar", "x")),
setNames(melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id"), c("id", "yvar", "y"))
), position = substr(xvar, 2, 1))
tmp
temp
temp = transform(data.frame(
setNames(melt(tmoy[,c(seq(1,15,by=2),17)], id.vars = "id"), c("id", "xvar", "x")),
setNames(melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id"), c("id", "yvar", "y")),
stringsAsFactors = FALSE
), position = substr(xvar, 2, 1))
temp
data.frame(
setNames(melt(tmoy[,c(seq(1,15,by=2),17)], id.vars = "id"), c("id", "xvar", "x")),
setNames(melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id"), c("id", "yvar", "y")),
stringsAsFactors = FALSE
)
data.frame(
setNames(melt(tmoy[,c(seq(1,15,by=2),17)], id.vars = "id"), c("id", "xvar", "x")),
setNames(melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id"), c("id", "yvar", "y")),
stringsAsFactors = FALSE
)$xvar
temp = transform(data.frame(
setNames(melt(tmoy[,c(seq(1,15,by=2),17)], id.vars = "id"), c("id", "xvar", "x")),
setNames(melt(tmoy[,c(seq(2,16,by=2),17)], id.vars = "id"), c("id", "yvar", "y"))
), position = substr(as.character(xvar), 2, 1))
ggplot(temp, aes(x, y, group = 1)) + geom_path() + facet_grid(.~id) +
geom_text(aes(label = position))
temp
grid.arrange(
ggplot(temp, aes(x, y, group = 1)) + geom_path() + facet_grid(.~id) ,
ggplot(sub, aes(Dim.1, Dim.2)) + geom_point() + facet_grid(.~part)
)
temp
temp$xvar
as.charcter(temp$xvar)
as.character(temp$xvar)
substr(as.character(temp$xvar), 2, 1)
substr(as.character(temp$xvar), 2, 2)
temp$position = substr(as.character(temp$xvar), 2, 2)
ggplot(temp, aes(x, y, group = 1)) + geom_path() + facet_grid(.~id)
ggplot(temp, aes(x, y, group = 1)) + geom_path() + facet_grid(.~id) + geom_text(aes(label=position))
ggplot(temp, aes(x, y, group = 1)) +
geom_path(col = "gray50") +
facet_grid(.~id) +
geom_position(aes(label = position))
ggplot(temp, aes(x, y, group = 1)) +
geom_path(col = "gray50") +
facet_grid(.~id) +
geom_text(aes(label = position))
ggplot(temp, aes(x, y, group = 1)) +
geom_path(col = "gray70") +
facet_grid(.~id) +
geom_text(aes(label = position))
ggplot(temp, aes(x, y, group = 1)) +
geom_path(col = "gray70") +
facet_grid(.~id) +
geom_text(aes(label = position)) +
theme_void()
?grid.arrange
