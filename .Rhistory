#   (taper sur `Ctrl+Entrée` pour exécuter le code)
print(a)
print(a + b)
print("bonjour")
typeof(a)
typeof("bonjour")
is.vector(a)
seq(5, 1)
seq(5, 1, by = 1)
seq(5, 1, by = -1)
seq(1, 5, by = .5)
seq(1, 5, by = .5)
seq(5, 1, length = 3)
c(1, 2, 5)
c("FX", "Jollois")
c(1, "trois")
c(1, 2, 5:7)
?c
rep(5, 2)
rep(1:5, 2)
rep(1:5, each = 3)
rep(1:5, 2, each = 3)
paste(rep(c("x", "y"), 4), rep(1:4, each = 2))
paste(rep(c("x", "y"), 4), rep(1:4, each = 2), sep = "")
c("1ère année","2ème année","LP")
paste(rep("promo", 3), c("1ère année","2ème année","LP"), sep = "=")
??asis
?knit_print
paste(rep("promo", 3), c("1ère année","2ème année","LP"), sep = "=")
c("1ère année","2ème année","LP")
paste("'", c("1ère année","2ème année","LP"), "'")
paste("'", c("1ère année","2ème année","LP"), "'", sep = "")
paste(rep("promo", 3), paste("'", c("1ère année","2ème année","LP"), "'", sep = ""))
paste(rep("promo", 3), paste("'", c("1ère année","2ème année","LP"), "'", sep = ""), sep = "=")
paste(rep("promo", 3), paste("'", c("1ère année","2ème année","LP"), "'", sep = ""), sep = "=")
paste(rep(c("x", "y"), 4), rep(seq(1,4), each = 2), sep = "")
rep(5, 2)
rep(1:5, 2)
rep(1:5, each = 3)
rep(1:5, 2, each = 3)
paste("bon", "jour")
paste("bon", "jour", sep = "")
paste0("bon", "jour")
paste0("bon", c("jour", "soir"))
paste(1, 2, 3, 4, 5, sep = ",")
paste(1:5, collapse = ",")
v1 = seq(1, -1, by = -.25)
v1
v2 = seq(0, 100, length = 23)
v3 = c("1ère année","2ème année","LP")
v4 = rep("promo", 3)
paste(v4, paste("'", v3, "'", sep = ""), sep = "=")
print(v5 <- paste(v4, v3, sep = "="))
print(v6 <- paste(v4, paste("'", v3, "'", sep = ""), sep = "="))
print(v7 <- paste(rep(c("x", "y"), 4), rep(seq(1,4), each = 2), sep = ""))
paste(1:5, collapse = ",")
cat(1:5, collapse = ",")
?cat
paste("bon", "jour")
paste("x", 1:5)
paste("x", 1:5, sep = "=")
paste(c("x", "y"), 1:5, sep = "=")
paste("bon", "jour", sep = "-$")
paste("bon", "jour", sep = "-")
paste("bon", "jour")
paste("bon", "jour", sep = "-")
paste("bon", "jour", sep = "")
paste0("bon", "jour")
```
paste0("bon", c("jour", "soir"))
paste(c("x", "y"), 1:5, sep = "=")
paste(1, 2, 3, 4, 5, sep = ",")
paste(1:5, collapse = ",")
paste(1:5, collapse = ",")
print(v7 <- paste(c("x", "y"), rep(seq(1,4), each = 2), sep = ""))
print(v7 <- paste(rep(c("x", "y"), 4), rep(seq(1,4), each = 2), sep = ""))
sqrt(2, 3)
sqrt(9)
0 ** -1
9 ** -1
9 ** (-1/2)
9 ** (-2)
9 ** (-sqrt(1/2))
9 ** (-sqrt(2))
9 ** .5
?sqrt
abs(pi) # valeur absolue
abs(-12) # valeur absolue
exp(1)
log(exp(1))
- 2
2 ^ 3
2 ^ 3
2 ** 3
+(5, 4)
`+`
`+`(4, 5)
sin(pi)
sin(1)
sin(45)
sin(90)
cos(90)
cos(1)
sin(1)
sin(pi)
cos(pi)
tan(pi)
cos(1)
sin(1)
tan(1)
cospi(1)
cos(1)
cos(pi)
cospi(45)
cospi(90)
??"=="
?identical
identical(1:5, seq(1, 5))
identical(1, "1")
identical(as.character(1), "1")
a > 1
a >= 1
a < 1
a <= 1
a == 1
a != 1
?"%in%"
match(a, 1:5)
match(1:5, a)
a %in% c(1, 3, 5)
c(a, b) %in% c(1, 3, 5)
c(1, 3, 5) %in% a
pmatch("", "")                             # returns NA
pmatch("m",   c("mean", "median", "mode")) # returns NA
pmatch("med", c("mean", "median", "mode")) # returns 2
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup = FALSE)
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup = TRUE)
a %in% c(1, 3, 5)
c(1, 3, 5) %in% a
c(a, b) %in% c(1, 3, 5)
class(mtcars)
dim(mtcars)
nrow(mtcars)
ncol(mtcars)
str(mtcars)
mtcars$mpg
mtcars[,"mpg"]
mtcars[,1]
mtcars[1,1]
mtcars[1:5,1]
mtcars[1:5,1:3]
mtcars[1:5, 1]
mtcars[1, 1:3]
mtcars[1:5,1:3]
mtcars["mpg"]
mtcars$c(mpg, cyl)
mtcars$c("mpg", "cyl")
mtcars[c("mpg", "hp")]
mtcars[,c("mpg", "hp")]
mtcars[,c(1, 4)]
identical(mtcars[c("mpg", "hp")], mtcars[,c("mpg", "hp")])
mtcars[1,1]
mtcars[1:5, 1]
mtcars[1, 1:3]
mtcars[1:5,1:3]
mtcars[mtcars$mpg < 15 & mtcars$qsec < 16, c("mpg", "hp")]
?mtcars
mtcars[mtcars$mpg < 15 & mtcars$qsec < 16, c("hp", "disp")]
?data()
Seatbelts
head(Seatbelts, 10)
nrow(Seatbelts)
ncol(Seatbelts)
names(Seatbelts)
colnames(Seatbelts)
class(Seatbelts)
Seatbelts$law
Seatbelts$law
swiss$Fertility
nrow(swiss)
ncol(swiss)
colnames(swiss)
names(swiss)
head(swiss, 10)
class(swiss)
swiss[c("Agriculture", "Education")]
"Rive" %in% rownmes(swiss)
"Rive" %in% rownames(swiss)
pmatch("Rive", rownames(swiss))
pmatch("Rive Droite", rownames(swiss))
pmatch(rownames(swiss), "Rive")
?charmatch
charmatch("Rive", rownames(swiss))
summary(swiss)
swiss[swiss$Infant.Mortality <= 15,]
swiss[swiss$Infant.Mortality <= 16,]
swiss[swiss$Infant.Mortality <= 17,]
swiss[swiss$Infant.Mortality <= 17,c("Agriculture", "Education")]
qnorm(.99)
qnorm(.999)
qnorm(.98)
rnorm(1000)
abs(rnorm(1000)
)
abs(rnorm(1000)) > 3
table(abs(rnorm(1000)) > 3)
table(abs(rnorm(1000000)) > 3)
prop.table(table(abs(rnorm(1000000)) > 3))
prop.table(table(abs(rnorm(1000000)) > 3))
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x))
)
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x)))
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x)))
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x)))
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x)))
qnorm(.999)
prop.table(table(abs(x <- rnorm(1000000)) > 3.09 * sd(x)))
pnorm(3)
quit()
hist(mtcars$mpg, breaks = c(10,12,15,20,25,35))
h = hist(mtcars$mpg, breaks = c(10,12,15,20,25,35))
h
cumsum(h$density)
msum(h$density)
sum(h$density)
h$breaks[-1] - h$breaks[-6]
(h$breaks[-1] - h$breaks[-6]) * h$density
sum((h$breaks[-1] - h$breaks[-6]) * h$density)
setwd("~/Sites/fxjollois.github.io")
heart = read.table("donnees/heart.txt", header = TRUE)
head(heart)
summary(heart)
dh = read.table("donnees/Detroit_homicide.txt", header = TRUE, skip = 35)
head(dh)
summary(h
)
summary(dh)
hep = read.table("donnees/hepatitis.TXT", header = TRUE, na.strings = "?")
head(hep)
summary(hep)
adult = read.table("donnees/adult.data")
head(adult)
adult = read.table("donnees/adult.data", sep = ",")
head(adult)
adult.names = read.table("donnees/adult.names", sep = ":", skip = 95)
head(adult.names)
adult.names = read.table("donnees/adult.names",
sep = ":", skip = 95, stringsAsFactors = FALSE)
head(adult.names)
adult.names$V1
names(adult) = c(adult.names$V1, "class")
summary(adult)
adult = read.table("donnees/adult.data", sep = ",", na.strings = " ?")
head(adult)
adult.names = read.table("donnees/adult.names",
sep = ":", skip = 95, stringsAsFactors = FALSE)
head(adult.names)
adult.names$V1
names(adult) = c(adult.names$V1, "class")
summary(adult)
heart$coeur == "presence"
subset(heart, select = c(type_douleur, sucre, electro, vaisseau))
subset(heart, select = c(type_douleur, sucre, electro, vaisseau)) == "A"
apply(subset(heart, select = c(type_douleur, sucre, electro, vaisseau)) == "A", 1, sum)
rowSums(subset(heart, select = c(type_douleur, sucre, electro, vaisseau)) == "A")
?rowSums
rowsum(iris[-5], iris$Species)
apply(iris[-5], 2, tapply, iris$Species, sum)
aggregate(. ~ Species, iris, sum)
ls()
load("donnees/Comptoir2000.RData")
ls()
rm(list = ls())
load("donnees/Comptoir2000.RData")
ls()
Categorie
setwd("~/Google Drive/A synchroniser/Enseignements/Données/Comptoir 2000/Comptoir2000-csv/")
dir()
readLines("Categorie.txt")
read.table("Categorie.txt")
read.table("Categorie.txt", header = T)
read.table("Categorie.txt", skip = 1)
read.table("Categorie.txt", skip = 1, quote = "\"")
read.table("Categorie.txt", skip = 1, sep = ";")
read.table("Categorie.txt", skip = 1, sep = ";")[-1]
read.table("Categorie.txt", nrows = 1, sep = ";")
read.table("Categorie.txt", nrows = 1, sep = ";", stringsAsFactors = FALSE)
read.table("Categorie.txt", nrows = 1, sep = ";", stringsAsFactors = FALSE)[1,]
c(read.table("Categorie.txt", nrows = 1, sep = ";", stringsAsFactors = FALSE))
unlist(read.table("Categorie.txt", nrows = 1, sep = ";", stringsAsFactors = FALSE))
names(Categorie) = unlist(read.table("Categorie.txt", nrows = 1, sep = ";", stringsAsFactors = FALSE))
Categorie
Categorie = read.table("Categorie.txt", skip = 1, sep = ";", stringsAsFactors = FALSE)[-1]
names(Categorie) = unlist(read.table("Categorie.txt", nrows = 1, sep = ";", stringsAsFactors = FALSE))
Categorie
Categorie = read.table("Categorie.txt", skip = 1, sep = ";", stringsAsFactors = FALSE)
names(Categorie) = unlist(read.table("Categorie.txt", nrows = 1, sep = ";", stringsAsFactors = FALSE))
readLines("Categorie.txt")
Categorie = read.table("Categorie.txt", skip = 10, sep = ";", stringsAsFactors = FALSE)
Categorie = read.table("Categorie.txt", skip = 0, sep = ";", stringsAsFactors = FALSE)
Categorie
Categorie = read.table("Categorie.txt",
header = TRUE, sep = ";", stringsAsFactors = FALSE)
Categorie
Categorie[5,2]
dir()
sub(".txt", "", dir())
dir(pattern = "*.txt")
dir(pattern = "*.txt")
source('~/.active-rstudio-document', echo=TRUE)
f
n
t
ls()
Produit
Categorie
read.table("Produit.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
read.table("Produit.txt",
header = TRUE, sep = ";", stringsAsFactors = FALSE, encoding = "latin1")
read.table("Produit.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, encoding = "utf-8")
readLines("Produit.txt")
read.table("Produit.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, encoding = "latin1")
?Encoding
read.table("Produit.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, encoding = "latin2")
read.table("Produit.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, encoding = "latin")
read.table("Produit.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, encoding = "ISO-8859-1")
read.table("Produit.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, encoding = "WINDOWS-1252")
read.table("Produit.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, encoding = "latin1")
for (f in dir(pattern = "*.txt")) {
n = sub(".txt", "", f)
t = read.table(f, header = TRUE, sep = ";", stringsAsFactors = FALSE)
assign(n, t)
}
DetailCommande
summary(DetailCommande)
ls()
setwd("~/Google Drive/A synchroniser/Enseignements/Données/Comptoir 2000/Comptoir2000-csv/")
for (f in dir(pattern = "*.txt")) {
n = sub(".txt", "", f)
t = read.table(f, header = TRUE, sep = ";", stringsAsFactors = FALSE)
assign(n, t)
}
rm(f, n, t)
ls()
save.image("../Comptoir2000.RData")
setwd("~/Sites/fxjollois.github.io")
save.image("donnees/Comptoir2000.RData")
Categorie
Client
ls()
Employe
subset(Employe, subset = Pays == "Royaume-Uni")
subset(Employe, Pays == "Royaume-Uni")
Categorie
Messager
subset(Employe, select = c(Nom, Prenom))
subset(Employe, select = c(Nom, Prénom))
Employe
subset(Employe, select = c(Nom, prenom))
subset(Employe, subset = Pays == "Royaume-Uni", select = c(Nom, prenom))
names(Employe)
subset(Employe, select = -c(DateNaissance, DateEmbauche, Adresse, Ville, Region, CodePostal, Pays, TelDom, Extension))
subset(Employe, select = -c(DateNaissance, DateEmbauche, Adresse, Ville, Region, Codeostal, Pays, TelDom, Extension))
subset(Employe, select = -c(DateNaissance, DateEmbauche, Adresse, Ville, Region, Codepostal, Pays, TelDom, Extension))
library(sqldf)
Produit
Messager
transform(Messager, Nom = toupper(NomMess))
Client
subset(Employe, select = -c(Adresse, Ville, Region, Codepostal, Pays, TelDom, Extension))
Produit
head(Produit)
ls()
Produit$QteParUnit
sub("\xee", "î", Produit$QteParUnit)
getwd()
load("donnees/Comptoir2000.RData")
Produit$QteParUnit
subset(mtcars, subset = am == 0)
subset(mtcars, subset = am == 1)
subset(mtcars, subset = mpg < 15)
subset(mtcars, subset = mpg <= 15)
subset(mtcars, subset = mpg < 15)
subset(mtcars, select = -c(hp, disp))
subset(mtcars, subset = mpg < 15, select = c(hp, disp))
mtcars
transform(mtcars, rapport = wt / hp, conso = 236 / mpg)
transform(mtcars, rapport = 1000 * wt / hp, conso = 236 / mpg)
conso = round(236 / mpg, 2))
transform(mtcars,
rapport = round(1000 * wt / hp),
conso = round(236 / mpg, 2))
aggregate(. ~ am, mtcars, length)
aggregate(. ~ am, mtcars, mean)
aggregate(. ~ ., mtcars, mean)
aggregate(. ~ , mtcars, mean)
aggregate(, mtcars, mean)
?aggregate
aggregate(mpg ~, mtcars, mean)
aggregate(mpg ~ ., mtcars, mean)
aggregate(mpg ~ 1, mtcars, mean)
aggregate(. ~ 1, mtcars, mean)
aggregate(mpg ~ 1, mtcars, mean)
aggregate(cbind(mpg, hp) ~ 1, mtcars, mean)
aggregagte(. ~ 1, mtcars, mean)
aggregate(. ~ 1, mtcars, mean)
aggregate(. ~ 1, mtcars, mean)
aggregate(mpg ~ am, mtcars, mean)
aggregate(mpg ~ am + 1, mtcars, mean)
aggregate(mpg ~ am + cyl, mtcars, mean)
aggregate(mpg ~ ., mtcars, mean)
aggregate(mpg ~ ., subset(mtcars, select = c(mpg, am, cyl)), mean)
aggregate(state.x77, list(Region = state.region), mean)
## than 130 days of frost.
aggregate(state.x77,
list(Region = state.region,
Cold = state.x77[,"Frost"] > 130),
mean)
aggregate(cbind(mpg, hp) ~ am + cyl, mtcars, mean)
?by
table(mtcars$cyl)
types.moteur = data.frame(
cyl = c(6, 8, 12),
type = c("moyen", "gros", "très gros")
)
types.moteur
table(mtcars$cyl)
unique(mtcars$cyl)
?merge
merge(mtcars, types.moteur)
names(type.moteur)
names(types.moteur)
names(types.moteur)[1] = "nbcyl"
types.moteur
merge(mtcars, types.moteur)
merge(mtcars, types.moteur, by.x = "cyl", by.y = "nbcyl")
merge(mtcars, types.moteur, all = TRUE)
names(types.moteur)[1] = "cyl"
merge(mtcars, types.moteur, all = TRUE)
merge(mtcars, types.moteur, all.x = TRUE)
merge(mtcars, types.moteur, all.y = TRUE)
sqldf("SELECT * FROM mtcars")
sqldf("SELECT * FROM mtcars WHERE mpg < 15")
sqldf("SELECT hp, disp FROM mtcars WHERE mpg < 15")
sqldf("
SELECT *, 1000 * wt / hp AS Rapport
FROM mtcars
")
sqldf("
SELECT *,
ROUND(1000 * wt / hp) AS rapport,
ROUND(236 / mpg, 2) AS conso
FROM mtcars
")
sqldf("
SELECT am, cyl, AVG(mp), AVG(hp)
FROM mtcars
GROUP BY am, cyl
")
sqldf("
SELECT am, cyl, AVG(mpg), AVG(hp)
FROM mtcars
GROUP BY am, cyl
")
sqldf("
SELECT *
FROM mtcars NATURAL JOIN types.moteur
")
types.moteur
types = types.moteur
SELECT *
FROM mtcars NATURAL JOIN types
")
sqldf("
SELECT *
FROM mtcars NATURAL JOIN types
")
"
sqldf("
SELECT *
FROM mtcars NATURAL JOIN types
")
sqldf("
SELECT *
FROM mtcars FULL OUTER JOIN types
ON mtcars.cyl = types.cyl
")
heart = read.table("donnees/heart.txt", header = T)
View(hear)
View(heart)
aggregate(1 ~ coeur, heart, length)
aggregate(. ~ coeur, heart, length)
aggregate(age ~ coeur, heart, length)
aggregate(cbind(pression, cholester) ~ coeur, heart, mean)
merge(
aggregate(cbind(pression, cholester) ~ coeur, heart, mean),
aggregate(age ~ coeur, heart, length)
)
