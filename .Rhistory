subset(mtcars, subset = mpg < 15 & qsec < 16)
subset(mtcars, subset = mpg < 15 & qsec < 16, select = c(mpg, hp, qsec))
mtcars[, c("mpg", "hp")]
mtcars[mtcars$mpg < 15,]
mtcars[mtcars$mpg < 15 & qsec < 16,]
mtcars[mtcars$mpg < 15 & mtcars$qsec < 16,]
mtcars[mtcars$mpg < 15 & mtcars$qsec < 16, c("mpg", "hp")]
subset(mtcars, select = c(mpg, hp))
subset(mtcars, subset = mpg < 15)
subset(mtcars, subset = mpg < 15 & qsec < 16)
subset(mtcars, subset = mpg < 15 & qsec < 16, select = c(mpg, hp, qsec))
mtcars$mpg
mtcars[,"mpg"]
mtcars[,1]
mtcars["mpg"]
mtcars[c("mpg", "hp")]
mtcars[mtcars$mpg < 15 & mtcars$qsec < 16,][c("mpg", "hp")]
var = "une variable"
print(var)
rm(var)
print(var)
v = "une variable"
print(v)
rm(v)
print(v)
rownames(mtcars)
rownames(mtcars)[c(1,3,4)]
mtcars[1,]
mtcars["Mazda RX4",]
mtcars[c(1, 3, 4),]
mtcars["Mazda RX4",]
mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive"),]
mtcars[mtcars$mpg < 15,]
mtcars[mtcars$mpg < 15 & mtcars$qsec < 16,]
2200 / 35
(208 + 142 + 45)
?knitr::opts_chunk
?islands
?between
??between
??in
??"in"
??"%in%"
??"between"
??"%between%"
print(a)
print(a + b)
print("bonjour")
# Chunk 1: init
knitr::opts_chunk$set(prompt = TRUE, comment = NA)
# Chunk 2
1 + 2
# Chunk 3
a = 1
b = 2
a + b
# Chunk 4
a + B
# Chunk 5
v = "une variable"
print(v)
rm(v)
print(v)
# Chunk 6
# Premières instructions
#   (taper sur `Ctrl+Entrée` pour exécuter le code)
print(a)
print(a + b)
print("bonjour")
typeof(a)
typeof("bonjour")
is.vector(a)
seq(5, 1)
seq(5, 1, by = 1)
seq(5, 1, by = -1)
seq(1, 5, by = .5)
seq(1, 5, by = .5)
seq(5, 1, length = 3)
c(1, 2, 5)
c("FX", "Jollois")
c(1, "trois")
c(1, 2, 5:7)
?c
rep(5, 2)
rep(1:5, 2)
rep(1:5, each = 3)
rep(1:5, 2, each = 3)
paste(rep(c("x", "y"), 4), rep(1:4, each = 2))
paste(rep(c("x", "y"), 4), rep(1:4, each = 2), sep = "")
c("1ère année","2ème année","LP")
paste(rep("promo", 3), c("1ère année","2ème année","LP"), sep = "=")
??asis
?knit_print
paste(rep("promo", 3), c("1ère année","2ème année","LP"), sep = "=")
c("1ère année","2ème année","LP")
paste("'", c("1ère année","2ème année","LP"), "'")
paste("'", c("1ère année","2ème année","LP"), "'", sep = "")
paste(rep("promo", 3), paste("'", c("1ère année","2ème année","LP"), "'", sep = ""))
paste(rep("promo", 3), paste("'", c("1ère année","2ème année","LP"), "'", sep = ""), sep = "=")
paste(rep("promo", 3), paste("'", c("1ère année","2ème année","LP"), "'", sep = ""), sep = "=")
paste(rep(c("x", "y"), 4), rep(seq(1,4), each = 2), sep = "")
rep(5, 2)
rep(1:5, 2)
rep(1:5, each = 3)
rep(1:5, 2, each = 3)
paste("bon", "jour")
paste("bon", "jour", sep = "")
paste0("bon", "jour")
paste0("bon", c("jour", "soir"))
paste(1, 2, 3, 4, 5, sep = ",")
paste(1:5, collapse = ",")
v1 = seq(1, -1, by = -.25)
v1
v2 = seq(0, 100, length = 23)
v3 = c("1ère année","2ème année","LP")
v4 = rep("promo", 3)
paste(v4, paste("'", v3, "'", sep = ""), sep = "=")
print(v5 <- paste(v4, v3, sep = "="))
print(v6 <- paste(v4, paste("'", v3, "'", sep = ""), sep = "="))
print(v7 <- paste(rep(c("x", "y"), 4), rep(seq(1,4), each = 2), sep = ""))
paste(1:5, collapse = ",")
cat(1:5, collapse = ",")
?cat
paste("bon", "jour")
paste("x", 1:5)
paste("x", 1:5, sep = "=")
paste(c("x", "y"), 1:5, sep = "=")
paste("bon", "jour", sep = "-$")
paste("bon", "jour", sep = "-")
paste("bon", "jour")
paste("bon", "jour", sep = "-")
paste("bon", "jour", sep = "")
paste0("bon", "jour")
```
paste0("bon", c("jour", "soir"))
paste(c("x", "y"), 1:5, sep = "=")
paste(1, 2, 3, 4, 5, sep = ",")
paste(1:5, collapse = ",")
paste(1:5, collapse = ",")
print(v7 <- paste(c("x", "y"), rep(seq(1,4), each = 2), sep = ""))
print(v7 <- paste(rep(c("x", "y"), 4), rep(seq(1,4), each = 2), sep = ""))
sqrt(2, 3)
sqrt(9)
0 ** -1
9 ** -1
9 ** (-1/2)
9 ** (-2)
9 ** (-sqrt(1/2))
9 ** (-sqrt(2))
9 ** .5
?sqrt
abs(pi) # valeur absolue
abs(-12) # valeur absolue
exp(1)
log(exp(1))
- 2
2 ^ 3
2 ^ 3
2 ** 3
+(5, 4)
`+`
`+`(4, 5)
sin(pi)
sin(1)
sin(45)
sin(90)
cos(90)
cos(1)
sin(1)
sin(pi)
cos(pi)
tan(pi)
cos(1)
sin(1)
tan(1)
cospi(1)
cos(1)
cos(pi)
cospi(45)
cospi(90)
??"=="
?identical
identical(1:5, seq(1, 5))
identical(1, "1")
identical(as.character(1), "1")
a > 1
a >= 1
a < 1
a <= 1
a == 1
a != 1
?"%in%"
match(a, 1:5)
match(1:5, a)
a %in% c(1, 3, 5)
c(a, b) %in% c(1, 3, 5)
c(1, 3, 5) %in% a
pmatch("", "")                             # returns NA
pmatch("m",   c("mean", "median", "mode")) # returns NA
pmatch("med", c("mean", "median", "mode")) # returns 2
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup = FALSE)
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup = TRUE)
a %in% c(1, 3, 5)
c(1, 3, 5) %in% a
c(a, b) %in% c(1, 3, 5)
class(mtcars)
dim(mtcars)
nrow(mtcars)
ncol(mtcars)
str(mtcars)
mtcars$mpg
mtcars[,"mpg"]
mtcars[,1]
mtcars[1,1]
mtcars[1:5,1]
mtcars[1:5,1:3]
mtcars[1:5, 1]
mtcars[1, 1:3]
mtcars[1:5,1:3]
mtcars["mpg"]
mtcars$c(mpg, cyl)
mtcars$c("mpg", "cyl")
mtcars[c("mpg", "hp")]
mtcars[,c("mpg", "hp")]
mtcars[,c(1, 4)]
identical(mtcars[c("mpg", "hp")], mtcars[,c("mpg", "hp")])
mtcars[1,1]
mtcars[1:5, 1]
mtcars[1, 1:3]
mtcars[1:5,1:3]
mtcars[mtcars$mpg < 15 & mtcars$qsec < 16, c("mpg", "hp")]
?mtcars
mtcars[mtcars$mpg < 15 & mtcars$qsec < 16, c("hp", "disp")]
?data()
Seatbelts
head(Seatbelts, 10)
nrow(Seatbelts)
ncol(Seatbelts)
names(Seatbelts)
colnames(Seatbelts)
class(Seatbelts)
Seatbelts$law
Seatbelts$law
swiss$Fertility
nrow(swiss)
ncol(swiss)
colnames(swiss)
names(swiss)
head(swiss, 10)
class(swiss)
swiss[c("Agriculture", "Education")]
"Rive" %in% rownmes(swiss)
"Rive" %in% rownames(swiss)
pmatch("Rive", rownames(swiss))
pmatch("Rive Droite", rownames(swiss))
pmatch(rownames(swiss), "Rive")
?charmatch
charmatch("Rive", rownames(swiss))
summary(swiss)
swiss[swiss$Infant.Mortality <= 15,]
swiss[swiss$Infant.Mortality <= 16,]
swiss[swiss$Infant.Mortality <= 17,]
swiss[swiss$Infant.Mortality <= 17,c("Agriculture", "Education")]
qnorm(.99)
qnorm(.999)
qnorm(.98)
rnorm(1000)
abs(rnorm(1000)
)
abs(rnorm(1000)) > 3
table(abs(rnorm(1000)) > 3)
table(abs(rnorm(1000000)) > 3)
prop.table(table(abs(rnorm(1000000)) > 3))
prop.table(table(abs(rnorm(1000000)) > 3))
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x))
)
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x)))
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x)))
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x)))
prop.table(table(abs(x <- rnorm(1000000)) > 3 * sd(x)))
qnorm(.999)
prop.table(table(abs(x <- rnorm(1000000)) > 3.09 * sd(x)))
pnorm(3)
quit()
hist(mtcars$mpg, breaks = c(10,12,15,20,25,35))
h = hist(mtcars$mpg, breaks = c(10,12,15,20,25,35))
h
cumsum(h$density)
msum(h$density)
sum(h$density)
h$breaks[-1] - h$breaks[-6]
(h$breaks[-1] - h$breaks[-6]) * h$density
sum((h$breaks[-1] - h$breaks[-6]) * h$density)
load("~/Sites/fxjollois.github.io/donnees/Comptoir2000.RData")
library(sqldf)
sqldf("
SELECT *
FROM (Commande NATURAL JOIN Client) NATURAL JOIN Employe
")
setwd("~/Sites/fxjollois.github.io")
dir(path = "donnees/ca/", pattern = "*.csv")
lapply(dir(path = "donnees/ca/", pattern = "*.csv"), function(f) {}
)
lapply(dir(path = "donnees/ca/", pattern = "*.csv"), function(f) {
n = strsplit(f, "\\.")[[1]][1]
ff = paste("donnees/ca/", f, sep = "")
t = read.table(ff, header = T, sep = ";", quote = FALSE)
assign(n, t)
return (TRUE)
})
lapply(dir(path = "donnees/ca/", pattern = "*.csv"), function(f) {
n = strsplit(f, "\\.")[[1]][1]
ff = paste("donnees/ca/", f, sep = "")
t = read.table(ff, header = T, sep = ";", quote = NULL)
assign(n, t)
return (TRUE)
})
ls()
n
?assign
lapply(dir(path = "donnees/ca/", pattern = "*.csv"), function(f) {
n = strsplit(f, "\\.")[[1]][1]
ff = paste("donnees/ca/", f, sep = "")
t = read.table(ff, header = T, sep = ";", quote = NULL)
assign(n, t, environment = .GlobalEnv)
return (TRUE)
})
lapply(dir(path = "donnees/ca/", pattern = "*.csv"), function(f) {
n = strsplit(f, "\\.")[[1]][1]
ff = paste("donnees/ca/", f, sep = "")
t = read.table(ff, header = T, sep = ";", quote = NULL)
assign(n, t, envir = .GlobalEnv)
return (TRUE)
})
# Remplacement de chaque var temporaire par son calcul
# Le code est indenté pour plus de clarté
ca_tout = merge(
merge(
merge(
ca,
provenance,
by.x = "prov_no", by.y = "no"
),
groupe,
by.x = "groupe_no", by.y = "no"
),
mois,
by.x = "mois_no", by.y = "no"
)
ca_evol = transform(
merge(
subset(transform(subset(ca_tout, annee == 2003), ca2003 = ca),
select = -c(ca, annee, no, mois_no)),
subset(transform(subset(ca_tout, annee == 2004), ca2004 = ca),
select = -c(ca, annee, no, mois_no)),
by = c("prov_no", "code_prov", "provenance",
"groupe_no", "code_dep", "departement",
"code_groupe", "groupe", "code_sgroupe", "sous_groupe",
"mois", "mois_numero")
),
evolution = ca2004 - ca2003
)
save.image("donnees/ca/ca.RData")
rm(list=ls())
??knitr
??"knitr engine"
load("donnees/ca/ca.RData")
plot(ca ~ mois_no, ca_tout, type = "b")
plot(ca ~ mois_no, aggregagte(ca ~ mois_no, ca_tout, sum), type = "b")
plot(ca ~ mois_no, aggregate(ca ~ mois_no, ca_tout, sum), type = "b")
plot(ca / 1000 ~ mois_no,
aggregate(ca ~ mois_no, ca_tout, sum),
type = "b"
)
plot(ca / 1000000 ~ mois_no,
aggregate(ca ~ mois_no, ca_tout, sum),
type = "b"
)
plot(ca / 1000000 ~ mois_no,
aggregate(ca ~ mois_no, ca_tout, sum),
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
par(mar = c(4, 4, 0, 0) + .1)
plot(ca / 1000000 ~ mois_no,
aggregate(ca ~ mois_no, ca_tout, sum),
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
par(mar = c(4, 4, 0, 0) + .1)
plot(ca / 1000000 ~ mois_no,
aggregate(ca ~ mois_no, ca_tout, mean),
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
par(mar = c(4, 4, 0, 0) + .1)
plot(ca / 1000000 ~ mois_no,
aggregate(ca ~ mois_no, ca_tout, sum),
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
d = aggregate(ca ~ mois_no, ca_tout, sum)
mean(d$ca)
d = aggregate(ca ~ mois_no, ca_tout, sum)
par(mar = c(4, 4, 0, 0) + .1)
plot(ca / 1000000 ~ mois_no,
d,
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
abline(h = mean(d$ca), lty = 3, col = "gray50")
d = aggregate(ca / 1000000 ~ mois_no, ca_tout, sum)
par(mar = c(4, 4, 0, 0) + .1)
plot(ca ~ mois_no,
d,
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
abline(h = mean(d$ca), lty = 3, col = "gray50")
d = aggregate(ca / 1000000 ~ mois_no, ca_tout, sum)
d = aggregate(ca / 1000000 ~ mois_no, ca_tout, sum)
par(mar = c(4, 4, 0, 0) + .1)
plot(ca ~ mois_no,
d,
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
abline(h = mean(d$ca), lty = 3, col = "gray50")
d
?aggregate
d = setNames(aggregate(ca / 1000000 ~ mois_no, ca_tout, sum), c("mois", "ca"))
par(mar = c(4, 4, 0, 0) + .1)
plot(ca ~ mois_no,
d,
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
abline(h = mean(d$ca), lty = 3, col = "gray50")
d = setNames(aggregate(ca / 1000000 ~ mois_no, ca_tout, sum), c("mois", "ca"))
par(mar = c(4, 4, 0, 0) + .1)
plot(ca ~ mois,
d,
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires"
)
abline(h = mean(d$ca), lty = 3, col = "gray50")
d = setNames(aggregate(ca / 1000000 ~ mois_no, ca_tout, sum), c("mois", "ca"))
par(mar = c(4, 4, 0, 0) + .1)
plot(ca ~ mois,
d,
type = "b",
xlab = "Mois",
ylab = "Chiffre d'affaires (M€)"
)
abline(h = mean(d$ca), lty = 3, col = "gray50")
d = setNames(aggregate(ca / 1000000 ~ mois_no, ca_tout, sum), c("mois", "ca"))
par(mar = c(4, 4, 0, 0) + .1)
plot(ca ~ mois, d, type = "b",
xlab = "Mois", ylab = "Chiffre d'affaires (M€)")
abline(h = mean(d$ca), lty = 3, col = "gray50")
library(flexdashboard)
load("../donnees/ca/ca.RData")
d = aggregate(cbind(ca2003, ca2004, evolution) ~ mois + mois_numero, ca_evol, sum)
knitr::kable(subset(d, select = -mois_numero))
names(d) = c("Mois", "2003", "2004", "Evolution")
knitr::kable(subset(d, select = -mois_numero))
d = aggregate(cbind(ca2003, ca2004, evolution) ~ mois + mois_numero, ca_evol, sum)
d = aggregate(cbind(ca2003, ca2004, evolution) ~ mois + mois_numero, ca_evol, sum)
names(d) = c("Mois", "2003", "2004", "Evolution")
knitr::kable(subset(d, select = -mois_numero))
d = aggregate(cbind(ca2003, ca2004, evolution) ~ mois + mois_numero, ca_evol, sum)
d = aggregate(cbind(ca2003, ca2004, evolution) ~ mois + mois_numero, ca_evol, sum)
d = subset(d, select = -mois_numero)
d = subset(d, select = -mois_numero)
d = aggregate(cbind(ca2003, ca2004, evolution) ~ mois + mois_numero, ca_evol, sum)
d = subset(d, select = -mois_numero)
names(d) = c("Mois", "2003", "2004", "Evolution")
knitr::kable(d)
d = aggregate(cbind(ca2003, ca2004, evolution) / 1000 ~ mois + mois_numero, ca_evol, sum)
d = subset(d, select = -mois_numero)
names(d) = c("Mois", "2003", "2004", "Evolution")
knitr::kable(d)
?kable
knitr::kable(d, digits = 1)
knitr::kable(d, digits = 0)
sum(d$2003)
sum(d["2003"])
sum(d["2004"]) / sum(d["2003"])
aggregate(ca ~ 1, ca, sum)
aggregate(ca ~ annee, ca, sum)
aggregate(ca ~ annee, ca_tout, sum)
d = aggregate(ca ~ annee, ca_tout, sum)
?div
?prod
d$ca[2] / d$ca[1] * 100
d$ca[2] / d$ca[1]
(d$ca[2] / d$ca[1] - 1) * 100
round((d$ca[2] / d$ca[1] - 1) * 100, 2)
paste(round((d$ca[2] / d$ca[1] - 1) * 100, 2), "%")
valueBox(v, icon = "fa-pencil", color = ilelse(v > 0, "green", "red"))
valueBox(v, icon = "fa-pencil", color = ifelse(v > 0, "green", "red"))
v = paste(round((d$ca[2] / d$ca[1] - 1) * 100, 2), "%")
valueBox(v, icon = "fa-pencil", color = ifelse(v > 0, "green", "red"))
