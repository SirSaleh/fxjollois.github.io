afficheMoyenne(c(3, 9, 1, NA, 12))
afficheMoyenne(c(3, 9, 1, NA, 12), na.rm = TRUE)
??list
data()
class(stackloss)
class(stack.loss)
class(state.x77)
class(state.region)
class(state)
class(state.abb)
class(state.center)
state.center
state.area
state.division
state
?state.abb
d = data()
d
class(d)
d$results
class(d$results)
head(d$results)
head(d$results$Item)
head(d$results[,3])
?class
class("CO2")
eval("class('CO2')")
quote("class('CO2')")
eval("class(quote('CO2'))")
eval("class(expression('CO2'))")
models <- mtcars %>%
split(.$cyl) %>%
map(function(df) lm(mpg ~ wt, data = df))
?walk
matrix(0, 2, 3)
is.list(matrix(0, 2, 3))
is.list(data.frame(matrix(0, 2, 3)))
list(faithful)
l = list(a = "chaîne", b = 12, c = 1:10, d = mtcars, e = list(x = faithful$eruptions, y = faithful$waiting))
l = list(a = "chaîne", b = 12, c = 1:10, d = mtcars, e = list(x = faithful$eruptions, y = faithful$waiting))
length(l)
names(l)
l[[1]]
l = list(a = "chaîne", b = 12, c = 1:10, d = mtcars, e = list(x = faithful$eruptions, y = faithful$waiting))
length(l)
names(l)
l[[1]]
l$b
l[1]
l = list(a = "chaîne", b = 12, c = 1:10, d = mtcars, e = list(x = faithful$eruptions, y = faithful$waiting))
length(l)
names(l)
l[1]
l[[2]]
l$c
l[1]
l[[1]]
l$a
is.list(1:5)
lapply(l, class)
sapply(l, class)
?lapply
i39 <- sapply(3:9, seq) # list of vectors
sapply(i39, fivenum)
vapply(i39, fivenum,
c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
fivenum
sapply(l, class)
vapply(l, class, "test")
sapply(l, mean)
sapply(l, class)
l = list(a = "chaîne",
b = 12,
c = 1:10,
d = head(mtcars),
e = list(x = 1:10, y = log(1:10)))
length(l)
names(l)
l[1]
l[[1]]
l$a
lapply(l, class)
sapply(l, class)
afficheElement <- function(e) {
cat("------------\n")
print(e)
cat("\n")
}
lapply(l, afficheElement)
classElement <- function(e) {
return(class(e))
}
lapply(l, classElement)
classElement <- function(e) {
return(classe = class(e), longueur = length(e))
}
lapply(l, classElement)
classElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c("CLASS", "LONG"))
vapply(l, classElement, c("CLASS", "LONG"))
classElement <- function(e) {
# return(c(classe = class(e), longueur = length(e)))
return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c("CLASS", "LONG"))
vapply(l, classElement, c("CLASS", "LONG"))
vapply(l, classElement, c("CLASS" = 0, "LONG" = 0))
sapply(i39, fivenum)
vapply(i39, fivenum)
vapply(i39, fivenum, paste("v", 1:5))
vapply(i39, fivenum, c(a = 0, b = 0, c = 0, d = 0, e = 0)
)
vapply(l, classElement, c(CLASS = 0, LONG = 0))
vapply(l, classElement, c(CLASS = 0, LONG = 0))
vapply(l, classElement, c(c = 0, l = 0))
classElement <- function(e) {
# return(c(classe = class(e), longueur = length(e)))
return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c(c = 0, l = 0))
vapply(l, classElement, c(c = "c", l = "l"))
vapply(l, classElement, c("c","l"))
vapply(l, classElement, c(cc = "c", ll = "l"))
classElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
# return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c(cc = "c", ll = "l"))
classElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
# return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c(cc = 0, ll = "l"))
classElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
# return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c(cc = 0, ll =0))
classElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
# return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c(cc = 0, ll = 0))
classElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
# return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c(cc = "", ll = ""))
classElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
# return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c(CLASSE = "", ll = ""))
vapply(l, classElement, c(CLASSE = "", ll = ""))
classElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
# return(c(class(e), length(e)))
}
lapply(l, classElement)
sapply(l, classElement)
vapply(l, classElement, c(CLASSE = "", LONG = ""))
sapply(l, function(e) {
return(c(classe = class(e), longueur = length(e)))
# return(c(class(e), length(e)))
})
dir()
??json
library(jsonlite)
??json
??"json""
??"json"
??"json"
??jsonlite
data1 <- fromJSON("https://api.github.com/users/hadley/orgs")
names(data1)
class(data1)
d = fromJSON("donnees/RATP-trafic-entrant-2015/trafic-annuel-entrant-par-station-du-reseau-ferre-2015-test.json")
class(d)
head(d)
load("~/Sites/fxjollois.github.io/donnees/World/world.Rdata")
head(list(Country))
load("donnees/World/world.Rdata")
c = head(Country)
as.list(c)
Country[1,]
as.list(Country[1,])
list(Country[1,])
i = 1
lres = as.list(Country[i,])
lres
subset(City, CountryCode == lres$Code)
lres$Code
lres$Capital = subset(City, ID = lres$Capital)
lres
lres = as.list(Country[i,])
lres$City = subset(City, CountryCode == lres$Code, select = -CountryCode)
lres$Capital = subset(City, ID == lres$Capital)
lres$Capital
lres
lres$Language = subset(CountryLanguage, CountryCode == lres$Code, select = -CountryCode)
lres
Country.liste = lapply(1:nrow(Country), function(i) {
lres = as.list(Country[i,])
lres$City = subset(City, CountryCode == lres$Code, select = -CountryCode)
lres$Capital = subset(City, ID == lres$Capital)
lres$Language = subset(CountryLanguage, CountryCode == lres$Code, select = -CountryCode)
return(lres)
})
length(Country.liste)
nrow(Country)
Country.liste[[12]]
i = 12
lres = as.list(Country[i,])
ville = subset(City, CountryCode == lres$Code, select = -CountryCode)
if (nrow(ville) > 0)
lres$City = ville
lres$City
lres$Capital
Country.liste = lapply(1:nrow(Country), function(i) {
lres = as.list(Country[i,])
ville = subset(City, CountryCode == lres$Code, select = -CountryCode)
if (nrow(ville) > 0)
lres$City = ville
if (!is.na(lres$Capital))
lres$Capital = subset(City, ID == lres$Capital)
langue = subset(CountryLanguage, CountryCode == lres$Code, select = -CountryCode)
if (nrow(langue) > 0)
lres$Language = langue
return(lres)
})
Country.liste[[12]]
Country.liste = lapply(1:nrow(Country), function(i) {
lres = as.list(Country[i,])
ville = subset(City, CountryCode == lres$Code, select = -CountryCode)
if (nrow(ville) > 0)
lres$City = ville
if (!is.na(lres$Capital)) {
lres$Capital = subset(City, ID == lres$Capital)
} else {
lres$Capital = NULL
}
langue = subset(CountryLanguage, CountryCode == lres$Code, select = -CountryCode)
if (nrow(langue) > 0)
lres$Language = langue
return(lres)
})
i
Country.liste[[i]]
save(Country.liste, file = "donnees/World/world-liste.Rdata")
gc()
length(Country.liste)
?function
()
{}
f <- function(...) {
print(argslist)
}
f()
f <- function(...) {
print(arglist)
}
f()
f <- function(...) {
print(argList)
}
f()
f <- function(...) {
print(match.call())
}
f()
f(1)
f(1, "a")
f <- function(...) {
print(match.call(expand.dots = FALSE))
}
f()
f(1)
f(1, "a")
f <- function(...) {
print(environment())
}
f()
f(1)
f(1, "a")
f <- function(...) {
print(formals())
}
f()
f(1)
f(1, "a")
summary(Country)
invisible(lapply(Country.liste, function(p) { cat(p$Name)}))
invisible(lapply(Country.liste, function(p) { cat(p$Name, "\n")}))
?invisible
lapply(l, print)
knitr::opts_chunk$set(comment = NULL)
afficheBonjour <- function() {
cat("Bonjour\n")
}
afficheBonjour()
pi2 <- function() {
res = pi ** 2
return(res)
}
a = pi2()
cat("Pi au carré = ", a, "\n")
afficheBonjour <- function(prenom) {
cat("Bonjour", prenom, "\n")
}
afficheBonjour("FX")
afficheBonjour()
puissance <- function(a, b) {
res = a ** b
return(res)
}
a = puissance(2, 4)
cat("a =", a, "\n")
afficheBonjour <- function(nom, prenom) {
cat("Bonjour ", prenom, " ", nom, "\n")
}
afficheBonjour("Jollois", "FX") # ordre par défaut
afficheBonjour(nom = "Jollois", prenom = "FX") # idem mais en précisant le nom des paramètres
afficheBonjour(prenom = "FX", nom = "Jollois") # en modifiant l'ordre de passage des paramètres
afficheBonjour <- function(nom, prenom = "??") {
cat("Bonjour ", prenom, " ", nom, "\n")
}
afficheBonjour("Jollois", "FX") # rien de changé par raport à avant
afficheBonjour("Jollois")
afficheMoyenne <- function(x, ...) {
m = mean(x, ...)
cat("Moyenne =", m, "\n")
}
afficheMoyenne(c(3, 9, 1, 7, 12))
afficheMoyenne(c(3, 9, 1, NA, 12))
afficheMoyenne(c(3, 9, 1, NA, 12), na.rm = TRUE)
class(mtcars)
is.list(mtcars)
l = list(a = "chaîne",
b = 12,
c = 1:10,
d = head(mtcars),
e = list(x = 1:10, y = log(1:10)))
length(l)
names(l)
l[1]
l[[1]]
l$a
lapply(l, class)
sapply(l, class)
infoElement <- function(e) {
return(c(classe = class(e), longueur = length(e)))
}
lapply(l, infoElement)
sapply(l, infoElement)
vapply(l, infoElement, c(CLASSE = "", LONG = ""))
sapply(l, function(e) {
return(c(classe = class(e), longueur = length(e)))
})
lapply(l, print)
lapply(l, function (e) { print(e); })
r = lapply(l, function (e) { print(e); })
identical(l, r)
r
l
l[[1:2]]
l[1:2]
l["a"]
l[c("a", "c")]
l[[c("a", "c")]]
l[names(l) %in% c("a", "c")]
l[sapply(l, is.list)]
l[sapply(l, is.vector)]
l[sapply(l, length) == 1]
Country.liste[[10]]
?Filter
mapply(rep, 1:4, 4:1)
Find(is.vector, l)
Find(is.vector, l, right = TRUE)
Position(is.vector, l)
Position(is.vector, l, right = TRUE)
Filter(is.vector, l)
Reduce(function(a, b) return(length(a) + length(b)), l, 0)
sapply(l, length)
Reduce(function(a, b) return(length(a) + length(b)), l, 0, accumulate = TRUE)
sapply(l, length)
Reduce(function(a, b) return(length(a) + length(b)), l, 0, accumulate = TRUE)
sapply(l, length)
Reduce(function(a, b) return(length(a) + length(b)), l, 0, accumulate = TRUE)
Reduce(function(a, b) return(length(a) + length(b)), 1:5, 0, accumulate = TRUE)
Reduce(function(a, b) return(length(a) + length(b)), 1:5, 1, accumulate = TRUE)
Reduce(function(a, b) return(a+b), 1:5, 0, accumulate = TRUE)
Reduce(function(a, b) return(a+b), 1:5, 0, accumulate = F)
Reduce(function(a, b) return(a + b), 1:5, 0, accumulate = T)
Reduce(function(a, b) return(a + b), 1:5, 0)
mt = lapply(1:nrow(mtars), function(i) return(as.list(mtcars[i,])))
mt = lapply(1:nrow(mtcars), function(i) return(as.list(mtcars[i,])))
mt[[1]]
list(mtcars[i,])
mt = lapply(1:nrow(mtcars), function(i) return(as.list(nom = names(mtcars)[i], mtcars[i,])))
mt[[1]]
i
as.list(nom = names(mtcars)[i], mtcars[i,])
mt = lapply(1:nrow(mtcars), function(i) {
return(list(nom = names(mtcars)[i], as.list(mtcars[i,])))
})
mt[[1]]
list(nom = names(mtcars)[i], as.list(mtcars[i,]))
as.list(nom = names(mtcars)[i], as.list(mtcars[i,]))
mt = lapply(1:nrow(mtcars), function(i) {
return(as.list(nom = rownames(mtcars)[i], as.list(mtcars[i,])))
})
mt[[1]]
mt = lapply(1:nrow(mtcars), function(i) {
return(list(nom = rownames(mtcars)[i], as.list(mtcars[i,])))
})
mt[[1]]
mt = lapply(1:nrow(mtcars), function(i) {
return(c(nom = rownames(mtcars)[i], as.list(mtcars[i,])))
})
mt[[1]]
class(mt[[1]])
class(mt[1])
unlist(mt[[1]])
Reduce(function(a, b) return(a$mpg + b$mpg), mt)
Reduce(function(a, b) return(a$mpg + b$mpg), mt, 0)
Reduce(function(a, b) return(a$mpg + b$mpg), mt, mt[1])
Reduce(function(a, b) {print(a); return(a$mpg + b$mpg)}, mt, mt[1])
Reduce(function(a, b) {print(a[[1]]); return(a$mpg + b$mpg)}, mt, mt[1])
Reduce(function(a, b) {print(a$nom); return(a$mpg + b$mpg)}, mt, mt[1])
Reduce(function(a, b) {print(a); return(a$mpg + b$mpg)}, mt, mt[1])
Reduce(function(a, b) {print(a, b); return(a$mpg + b$mpg)}, mt, mt[1])
Reduce(function(a, b) {print(b); return(a$mpg + b$mpg)}, mt, mt[1])
Reduce(function(a, b) {print(b); return(a$mpg + b$mpg)}, mt, mt[[1]])
Reduce(function(a, b) {print(a); return(a$mpg + b$mpg)}, mt, mt[[1]])
Reduce(function(a, b) {print(a); return(a$mpg + b$mpg)}, mt, init)
init = list(mpg = 0)
Reduce(function(a, b) {print(a); return(a$mpg + b$mpg)}, mt, init)
Reduce(function(a, b) {print(a$mpg); print(b$mpg); return(a$mpg + b$mpg)}, mt, init)
Reduce(function(a, b) { a$mpg = a$mpg + b$mpg return(a)}, mt, init)
Reduce(function(a, b) { a$mpg = a$mpg + b$mpg; return(a)}, mt, init)
sum(mptcars$mpg)
sum(mtcars$mpg)
init = list(mpg = 0)
Reduce(function(a, b) { a$mpg = a$mpg + b$mpg; return(a)}, mt, init)
Reduce(function(a, b) { a$mpg = a$mpg + b$mpg; return(b)}, mt, init)
Reduce(function(a, b) { a$mpg = a$mpg + b$mpg; return(a)}, mt, init)
affichePays <- function(pays, continent) {
cat(pays, " (", continent, ")\n")
}
affichePays("France", "Europe")
affichePays <- function(pays, continent) {
cat(pays, " (", continent, ")\n", sep = "")
}
affichePays("France", "Europe")
subset(Country, Name == "France")
affichePays <- function(pays, continent) {
cat(pays, " (", continent, ")\n", sep = "")
}
affichePays("France", "Europe")
affichePays <- function(pays, continent, indep = NULL) {
if (is.null(indep)) {
cat(pays, " (", continent, ")\n", sep = "")
} else {
cat(pays, " (", continent, " - indépendant en ", indep, ")\n", sep = "")
}
}
affichePays("France", "Europe")
affichePays("France", "Europe", 843)
lapply(Country.liste, affichePays)
invisible(lapply(Country.liste, function(p) { affichePays(p$Name, p$Continent, p$IndepYear) }))
affichePays <- function(pays, continent) {
cat(pays, " (", continent, ")\n", sep = "")
}
affichePays("France", "Europe")
affichePays <- function(pays, continent, indep = NA) {
if (is.na(indep)) {
cat(pays, " (", continent, ")\n", sep = "")
} else {
cat(pays, " (", continent, " - indépendant en ", indep, ")\n", sep = "")
}
}
affichePays("France", "Europe")
affichePays("France", "Europe", 843)
invisible(lapply(Country.liste, function(p) { affichePays(p$Name, p$Continent, p$IndepYear) }))
lapply(Country.liste, function (p) return(p$Population))
sum(sapply(Country.liste, function (p) return(p$Population)))
sapply(Country.liste, function (p) return(p$Population))
sum(sapply(Country.liste, function (p) return(p$Population)))
sum(as.numeric(sapply(Country.liste, function (p) return(p$Population))))
p = Country.liste[[10]]
p$Population
class(p$Population)
